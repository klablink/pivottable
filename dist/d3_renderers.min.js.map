{"version":3,"sources":["d3_renderers.js"],"names":["$","d3","pivotUtilities","d3_renderers","Treemap","pivotData","opts","extend","localeStrings","width","window","height","result","css","tree","name","children","addToTree","path","value","length","x","shift","_i","_Array$from","Array","from","child","newChild","push","_i2","_Array$from2","getRowKeys","rowKey","getAggregator","color","scale","category10","treemap","layout","size","sticky","d","select","append","style","datum","selectAll","data","padding","nodes","enter","attr","text","call","this","y","Math","max","dx","dy","jQuery"],"mappings":"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","file":"d3_renderers.min.js","sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/main/docs/suggestions.md\n */\n\n(($, d3) => $.pivotUtilities.d3_renderers = { Treemap(pivotData, opts) {\n    let value;\n    const defaults = {\n        localeStrings: {},\n        d3: {\n            width() { return $(window).width() / 1.4; },\n            height() { return $(window).height() / 1.4; }\n        }\n    };\n\n    opts = $.extend(true, {}, defaults, opts);\n\n\n    const result = $(\"<div>\").css({width: \"100%\", height: \"100%\"});\n\n    const tree = {name: \"All\", children: []};\n    var addToTree = function(tree, path, value) {\n        if (path.length === 0) {\n            tree.value = value;\n            return;\n        }\n        if (tree.children == null) { tree.children = []; }\n        const x = path.shift();\n        for (var child of Array.from(tree.children)) {\n            if (child.name === x) {\n                addToTree(child, path, value);\n                return;\n            }\n        }\n        const newChild = {name: x};\n        addToTree(newChild, path, value);\n        return tree.children.push(newChild);\n    };\n\n    for (var rowKey of Array.from(pivotData.getRowKeys())) {\n        value = pivotData.getAggregator(rowKey, []).value();\n        if (value != null) {\n            addToTree(tree, rowKey, value);\n        }\n    }\n\n    const color = d3.scale.category10();\n    const width = opts.d3.width();\n    const height = opts.d3.height();\n\n    const treemap = d3.layout.treemap()\n        .size([width, height])\n        .sticky(true)\n        .value( d => d.size);\n\n    d3.select(result[0])\n        .append(\"div\")\n            .style(\"position\", \"relative\")\n            .style(\"width\", width + \"px\")\n            .style(\"height\", height + \"px\")\n        .datum(tree).selectAll(\".node\")\n            .data(treemap.padding([15,0,0,0]).value( d => d.value).nodes)\n        .enter().append(\"div\")\n        .attr(\"class\", \"node\")\n        .style(\"background\", function(d) { if (d.children != null) { return \"lightgrey\"; } else { return color(d.name); }  })\n        .text( d => d.name)\n        .call(function() {\n                this.style(\"left\",  d => d.x+\"px\")\n                    .style(\"top\",   d => d.y+\"px\")\n                    .style(\"width\", d => Math.max(0, d.dx - 1)+\"px\")\n                    .style(\"height\",d => Math.max(0, d.dy - 1)+\"px\");\n    });\n\n    return result;\n}\n})(jQuery, d3);\n\n\n\n"]}