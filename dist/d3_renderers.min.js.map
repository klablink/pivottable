{"version":3,"sources":["d3_renderers.js"],"names":["callWithJQueryAndD3","pivotModule","exports","_typeof","module","require","define","amd","jQuery","d3","$","pivotUtilities","d3_renderers","Treemap","pivotData","opts","addToTree","tree","path","value","length","children","_step","x","shift","_iterator","_createForOfIteratorHelper","s","n","done","child","name","err","e","f","newChild","push","extend","localeStrings","width","window","height","_step2","result","css","_iterator2","getRowKeys","rowKey","getAggregator","color","scale","category10","treemap","layout","size","sticky","d","select","append","style","datum","selectAll","data","padding","nodes","enter","attr","text","call","this","y","Math","max","dx","dy"],"mappings":"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","file":"d3_renderers.min.js","sourcesContent":["// noinspection JSUnresolvedReference,NpmUsedModulesInstalled\n\n/** global: jQuery, define, d3 */\n\nconst callWithJQueryAndD3 = function(pivotModule) {\n    if ((typeof exports === 'object') && (typeof module === 'object')) { // CommonJS\n        return pivotModule(require('jquery'), require('d3'));\n    } else if ((typeof define === 'function') && define.amd) { // AMD\n        return define(['jquery', 'd3'], pivotModule);\n        // Plain browser env\n    } else {\n        return pivotModule(jQuery, d3);\n    }\n};\n\ncallWithJQueryAndD3(($, d3) => $.pivotUtilities.d3_renderers = {\n    Treemap(pivotData, opts) {\n        let value;\n        const defaults = {\n            localeStrings: {},\n            d3: {\n                width() {\n                    return $(window).width() / 1.4;\n                },\n                height() {\n                    return $(window).height() / 1.4;\n                },\n            },\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n\n\n        const result = $('<div>').css({ width: '100%', height: '100%' });\n\n        const tree = { name: 'All', children: [] };\n        const addToTree = function (tree, path, value) {\n            if (path.length === 0) {\n                tree.value = value;\n                return;\n            }\n            if (tree.children == null) {\n                tree.children = [];\n            }\n            const x = path.shift();\n            for (let child of tree.children) {\n                if (child.name === x) {\n                    addToTree(child, path, value);\n                    return;\n                }\n            }\n            const newChild = { name: x };\n            addToTree(newChild, path, value);\n            return tree.children.push(newChild);\n        };\n\n        for (let rowKey of pivotData.getRowKeys()) {\n            value = pivotData.getAggregator(rowKey, []).value();\n            if (value != null) {\n                addToTree(tree, rowKey, value);\n            }\n        }\n\n        const color = d3.scale.category10();\n        const width = opts.d3.width();\n        const height = opts.d3.height();\n\n        const treemap = d3.layout.treemap()\n            .size([width, height])\n            .sticky(true)\n            .value(d => d.size);\n\n        d3.select(result[0])\n            .append('div')\n            .style('position', 'relative')\n            .style('width', width + 'px')\n            .style('height', height + 'px')\n            .datum(tree).selectAll('.node')\n            .data(treemap.padding([15, 0, 0, 0]).value(d => d.value).nodes)\n            .enter().append('div')\n            .attr('class', 'node')\n            .style('background', function (d) {\n                if (d.children != null) {\n                    return 'lightgrey';\n                } else {\n                    return color(d.name);\n                }\n            })\n            .text(d => d.name)\n            .call(function () {\n                this.style('left', d => d.x + 'px')\n                    .style('top', d => d.y + 'px')\n                    .style('width', d => Math.max(0, d.dx - 1) + 'px')\n                    .style('height', d => Math.max(0, d.dy - 1) + 'px');\n            });\n\n        return result;\n    },\n});\n\n\n\n"]}