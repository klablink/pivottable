{"version":3,"sources":["d3_renderers.js"],"names":["callWithJQueryAndD3","pivotModule","exports","module","require","define","amd","jQuery","d3","$","pivotUtilities","d3_renderers","Treemap","pivotData","opts","extend","localeStrings","width","window","height","let","value","rowKey","result","css","tree","name","children","addToTree","path","length","child","x","shift","newChild","push","getRowKeys","getAggregator","color","scale","category10","treemap","layout","size","sticky","d","select","append","style","datum","selectAll","data","padding","nodes","enter","attr","text","call","this","y","Math","max","dx","dy"],"mappings":"AAIA,IAAMA,oBAAsB,SAASC,GACjC,MAAwB,UAAnB,OAAOC,SAA4C,UAAlB,OAAOC,OAClCF,EAAYG,QAAQ,QAAQ,EAAGA,QAAQ,IAAI,CAAC,EACzB,YAAlB,OAAOC,QAA0BA,OAAOC,IACzCD,OAAO,CAAC,SAAU,MAAOJ,CAAW,EAGpCA,EAAYM,OAAQC,EAAE,CAErC,EAEAR,oBAAoB,CAACS,EAAGD,IAAOC,EAAEC,eAAeC,aAAe,CAC3DC,QAAQC,EAAWC,GAcfA,EAAOL,EAAEM,OAAO,CAAA,EAAM,GAZL,CACbC,cAAe,GACfR,GAAI,CACAS,QACI,OAAOR,EAAES,MAAM,EAAED,MAAM,EAAI,GAC/B,EACAE,SACI,OAAOV,EAAES,MAAM,EAAEC,OAAO,EAAI,GAChC,CACJ,CACJ,EAEoCL,CAAI,EAbxCM,IAAIC,EAuCKC,EAvBHC,EAASd,EAAE,OAAO,EAAEe,IAAI,CAAEP,MAAO,OAAQE,OAAQ,MAAO,CAAC,EAEzDM,EAAO,CAAEC,KAAM,MAAOC,SAAU,EAAG,EACvB,SAAZC,EAAsBH,EAAMI,EAAMR,GACpC,GAAoB,IAAhBQ,EAAKC,OAAT,CAIqB,MAAjBL,EAAKE,WACLF,EAAKE,SAAW,IAEpB,IACSI,EADHC,EAAIH,EAAKI,MAAM,EACrB,IAASF,KAASN,EAAKE,SACnB,GAAII,EAAML,OAASM,EAEf,OADAJ,EAAUG,EAAOF,EAAMR,CAAK,EAIpC,IAAMa,EAAW,CAAER,KAAMM,CAAE,EAE3B,OADAJ,EAAUM,EAAUL,EAAMR,CAAK,EACxBI,EAAKE,SAASQ,KAAKD,CAAQ,CAblC,CAFIT,EAAKJ,MAAQA,CAgBrB,CAEA,IAASC,KAAUT,EAAUuB,WAAW,EAEvB,OADbf,EAAQR,EAAUwB,cAAcf,EAAQ,EAAE,EAAED,MAAM,IAE9CO,EAAUH,EAAMH,EAAQD,CAAK,EAIrC,IAAMiB,EAAQ9B,EAAG+B,MAAMC,WAAW,EAClC,IAAMvB,EAAQH,EAAKN,GAAGS,MAAM,EACtBE,EAASL,EAAKN,GAAGW,OAAO,EAExBsB,EAAUjC,EAAGkC,OAAOD,QAAQ,EAC7BE,KAAK,CAAC1B,EAAOE,EAAO,EACpByB,OAAO,CAAA,CAAI,EACXvB,MAAMwB,GAAKA,EAAEF,IAAI,EA0BtB,OAxBAnC,EAAGsC,OAAOvB,EAAO,EAAE,EACdwB,OAAO,KAAK,EACZC,MAAM,WAAY,UAAU,EAC5BA,MAAM,QAAS/B,EAAQ,IAAI,EAC3B+B,MAAM,SAAU7B,EAAS,IAAI,EAC7B8B,MAAMxB,CAAI,EAAEyB,UAAU,OAAO,EAC7BC,KAAKV,EAAQW,QAAQ,CAAC,GAAI,EAAG,EAAG,EAAE,EAAE/B,MAAMwB,GAAKA,EAAExB,KAAK,EAAEgC,KAAK,EAC7DC,MAAM,EAAEP,OAAO,KAAK,EACpBQ,KAAK,QAAS,MAAM,EACpBP,MAAM,aAAc,SAAUH,GAC3B,OAAkB,MAAdA,EAAElB,SACK,YAEAW,EAAMO,EAAEnB,IAAI,CAE3B,CAAC,EACA8B,KAAKX,GAAKA,EAAEnB,IAAI,EAChB+B,KAAK,WACFC,KAAKV,MAAM,OAAQH,GAAKA,EAAEb,EAAI,IAAI,EAC7BgB,MAAM,MAAOH,GAAKA,EAAEc,EAAI,IAAI,EAC5BX,MAAM,QAASH,GAAKe,KAAKC,IAAI,EAAGhB,EAAEiB,GAAK,CAAC,EAAI,IAAI,EAChDd,MAAM,SAAUH,GAAKe,KAAKC,IAAI,EAAGhB,EAAEkB,GAAK,CAAC,EAAI,IAAI,CAC1D,CAAC,EAEExC,CACX,CACJ,CAAC","file":"d3_renderers.min.js","sourcesContent":["// noinspection JSUnresolvedReference,NpmUsedModulesInstalled\n\n/** global: jQuery, define, d3 */\n\nconst callWithJQueryAndD3 = function(pivotModule) {\n    if ((typeof exports === 'object') && (typeof module === 'object')) { // CommonJS\n        return pivotModule(require('jquery'), require('d3'));\n    } else if ((typeof define === 'function') && define.amd) { // AMD\n        return define(['jquery', 'd3'], pivotModule);\n        // Plain browser env\n    } else {\n        return pivotModule(jQuery, d3);\n    }\n};\n\ncallWithJQueryAndD3(($, d3) => $.pivotUtilities.d3_renderers = {\n    Treemap(pivotData, opts) {\n        let value;\n        const defaults = {\n            localeStrings: {},\n            d3: {\n                width() {\n                    return $(window).width() / 1.4;\n                },\n                height() {\n                    return $(window).height() / 1.4;\n                },\n            },\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n\n\n        const result = $('<div>').css({ width: '100%', height: '100%' });\n\n        const tree = { name: 'All', children: [] };\n        const addToTree = function (tree, path, value) {\n            if (path.length === 0) {\n                tree.value = value;\n                return;\n            }\n            if (tree.children == null) {\n                tree.children = [];\n            }\n            const x = path.shift();\n            for (let child of tree.children) {\n                if (child.name === x) {\n                    addToTree(child, path, value);\n                    return;\n                }\n            }\n            const newChild = { name: x };\n            addToTree(newChild, path, value);\n            return tree.children.push(newChild);\n        };\n\n        for (let rowKey of pivotData.getRowKeys()) {\n            value = pivotData.getAggregator(rowKey, []).value();\n            if (value != null) {\n                addToTree(tree, rowKey, value);\n            }\n        }\n\n        const color = d3.scale.category10();\n        const width = opts.d3.width();\n        const height = opts.d3.height();\n\n        const treemap = d3.layout.treemap()\n            .size([width, height])\n            .sticky(true)\n            .value(d => d.size);\n\n        d3.select(result[0])\n            .append('div')\n            .style('position', 'relative')\n            .style('width', width + 'px')\n            .style('height', height + 'px')\n            .datum(tree).selectAll('.node')\n            .data(treemap.padding([15, 0, 0, 0]).value(d => d.value).nodes)\n            .enter().append('div')\n            .attr('class', 'node')\n            .style('background', function (d) {\n                if (d.children != null) {\n                    return 'lightgrey';\n                } else {\n                    return color(d.name);\n                }\n            })\n            .text(d => d.name)\n            .call(function () {\n                this.style('left', d => d.x + 'px')\n                    .style('top', d => d.y + 'px')\n                    .style('width', d => Math.max(0, d.dx - 1) + 'px')\n                    .style('height', d => Math.max(0, d.dy - 1) + 'px');\n            });\n\n        return result;\n    },\n});\n\n\n\n"]}