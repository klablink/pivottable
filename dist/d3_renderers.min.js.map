{"version":3,"sources":["d3_renderers.js"],"names":["callWithJQueryAndD3","pivotModule","exports","_typeof","module","require","define","amd","jQuery","d3","$","pivotUtilities","d3_renderers","Treemap","pivotData","opts","extend","localeStrings","width","window","height","result","css","tree","name","children","addToTree","path","value","length","x","shift","_i","_Array$from","Array","from","child","newChild","push","_i2","_Array$from2","getRowKeys","rowKey","getAggregator","color","scale","category10","treemap","layout","size","sticky","d","select","append","style","datum","selectAll","data","padding","nodes","enter","attr","text","call","this","y","Math","max","dx","dy"],"mappings":"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","file":"d3_renderers.min.js","sourcesContent":["/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/main/docs/suggestions.md\n */\n\nconst callWithJQueryAndD3 = function(pivotModule) {\n    if ((typeof exports === \"object\") && (typeof module === \"object\")) { // CommonJS\n        return pivotModule(require(\"jquery\"), require(\"d3\"));\n    } else if ((typeof define === \"function\") && define.amd) { // AMD\n        return define([\"jquery\", \"d3\"], pivotModule);\n        // Plain browser env\n    } else {\n        return pivotModule(jQuery, d3);\n    }\n};\n\ncallWithJQueryAndD3(($, d3) => $.pivotUtilities.d3_renderers = {\n    Treemap(pivotData, opts) {\n        let value;\n        const defaults = {\n            localeStrings: {},\n            d3: {\n                width() {\n                    return $(window).width() / 1.4;\n                },\n                height() {\n                    return $(window).height() / 1.4;\n                },\n            },\n        };\n\n        opts = $.extend(true, {}, defaults, opts);\n\n\n        const result = $('<div>').css({ width: '100%', height: '100%' });\n\n        const tree = { name: 'All', children: [] };\n        var addToTree = function (tree, path, value) {\n            if (path.length === 0) {\n                tree.value = value;\n                return;\n            }\n            if (tree.children == null) {\n                tree.children = [];\n            }\n            const x = path.shift();\n            for (var child of Array.from(tree.children)) {\n                if (child.name === x) {\n                    addToTree(child, path, value);\n                    return;\n                }\n            }\n            const newChild = { name: x };\n            addToTree(newChild, path, value);\n            return tree.children.push(newChild);\n        };\n\n        for (var rowKey of Array.from(pivotData.getRowKeys())) {\n            value = pivotData.getAggregator(rowKey, []).value();\n            if (value != null) {\n                addToTree(tree, rowKey, value);\n            }\n        }\n\n        const color = d3.scale.category10();\n        const width = opts.d3.width();\n        const height = opts.d3.height();\n\n        const treemap = d3.layout.treemap()\n            .size([width, height])\n            .sticky(true)\n            .value(d => d.size);\n\n        d3.select(result[0])\n            .append('div')\n            .style('position', 'relative')\n            .style('width', width + 'px')\n            .style('height', height + 'px')\n            .datum(tree).selectAll('.node')\n            .data(treemap.padding([15, 0, 0, 0]).value(d => d.value).nodes)\n            .enter().append('div')\n            .attr('class', 'node')\n            .style('background', function (d) {\n                if (d.children != null) {\n                    return 'lightgrey';\n                } else {\n                    return color(d.name);\n                }\n            })\n            .text(d => d.name)\n            .call(function () {\n                this.style('left', d => d.x + 'px')\n                    .style('top', d => d.y + 'px')\n                    .style('width', d => Math.max(0, d.dx - 1) + 'px')\n                    .style('height', d => Math.max(0, d.dy - 1) + 'px');\n            });\n\n        return result;\n    },\n});\n\n\n\n"]}