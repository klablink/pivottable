{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","childIndex","childKeysIndices","colGetter","dayNamesEn","derivers","expandAll","expandRowCol","expandRowsGroupAfter","expandWithSpan","filterByLength","getAxis","getExpandAllHandler","getExpandHandler","getHeader","getSort","levelKeysIndices","locales","mthNamesEn","naturalSort","numberFormat","parentKeysIndices","pivotTableRenderer","rd","renderers","rowGetter","rx","rz","showHide","sortAs","subarrays","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","id","agg","getAggregator","concat","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","rendererLabel","valuesLabel","fieldsLabel","colsLabel","rowsLabel","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","nulls_first","a1","b1","nas","nbs","nf","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","keys","filter","array","map","d","input","ref10","ref11","ref12","ref13","ref14","ref15","ref16","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","Array","isArray","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","aggregatorsLabel","grouping","rowGroupBefore","colGroupBefore","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","all_keys","flatColKey","flatRowKey","len2","o","forEach","fromCharCode","pivotUtilities","pivotData","colsExpandHandler","colspan","compactLayout","getClickHandler","lbl","len3","len4","len5","len6","rowExpandHandler","rowGap","rowsExpandHandler","spanSize","t","tbody","td","th","thead","totalAggregator","tr","txt","u","w","y","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","onclick","innerHTML","colSpan","style","paddingLeft","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","divAggregator","existingOpts","fn1","idx","initialRender","itemsId","materializedInput","ordering","pivotTable","pvVals","pvtRenderType","recordsProcessed","refresh","refreshDelayed","renameAggregators","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","uiButtonColumns","uiButtonGroups","uiContainer","uiMenu","uiParameters","uiPivotContainer","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","multiple","parametersActive","displayName","toUpperCase","base","addClass","on","show","removeClass","hide","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","class","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","prop","toggleClass","left","top","currentTarget","position","css","remove","role","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","aggIdx","aggVals","aggregatorType","container","currentPivotData","found","initialVals","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","instance","findIndex","splice","not","excludedItems","inclusionsInfo","rendererName","children","setTimeout","inArray","change","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align","el","parentNode","key","up","level","selecttion","getter","nth","offset","hasClass","cell","initIndex","insertPoint","parentIndex","closest","_old","prepend","rowSpan","dft","span","_span","expand","levels","trigger","handler","ev","target"],"mappings":"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","file":"pivot.min.js","sourcesContent":["#noinspection CoffeeScriptUnusedLocalSymbols\n#noinspection CoffeeScriptUnusedLocalSymbols\ncallWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: (id) ->\n                agg = data.getAggregator([@selector...,id]...)\n                return @inner.value() / agg.inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n                rendererLabel: \"Renderer\"\n                valuesLabel: \"Values\"\n                fieldsLabel: \"Fields\"\n                colsLabel: \"Columns\"\n                rowsLabel: \"Rows\"\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs, nulls_first=true) =>\n        #nulls first\n        nf = if nulls_first then 1 else -1\n        return -1*nf if bs? and not as?\n        return  1*nf if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    filterByLength = (keys, length) -> keys.filter (x) -> x.length == length\n\n    subarrays = (array) -> array.map (d,i) -> array.slice(0,i+1)  # [1,2,3] => [[1], [1,2], [1,2,3]]\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            if !Array.isArray(opts.aggregator)\n                opts.aggregator = opts.aggregator ? aggregatorTemplates.count()()\n                opts.aggregator = [opts.aggregator]\n            @aggregator = opts.aggregator ? [aggregatorTemplates.count()()]\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator.map( (agg) => agg(this, [], []))\n            @sorted = false\n            @aggregatorsLabel = opts.aggregatorsLabel ? []\n            @grouping = opts.grouping ? false\n            @rowGroupBefore = opts.grouping?.rowGroupBefore ? true\n            @colGroupBefore = opts.grouping?.colGroupBefore ? false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs, nulls_first) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i], nulls_first)\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else                     @rowKeys.sort @arrSort(@rowAttrs, @rowGroupBefore)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else                     @colKeys.sort @arrSort(@colAttrs, @colGroupBefore)\n\n        getColKeys: (all_keys=false) =>\n            @sortKeys()\n            return if all_keys then @colKeys else filterByLength @colKeys, @colAttrs.length\n\n        getRowKeys: (all_keys=false) =>\n            @sortKeys()\n            return if all_keys then @rowKeys else filterByLength @rowKeys, @rowAttrs.length\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKeys = []\n            rowKeys = []\n            colKeys.push record[x] ? \"null\" for x in @colAttrs\n            rowKeys.push record[x] ? \"null\" for x in @rowAttrs\n            colKeys = if @grouping and colKeys.length then subarrays colKeys else [ colKeys ]\n            rowKeys = if @grouping and rowKeys.length then subarrays rowKeys else [ rowKeys ]\n\n            @aggregator.forEach (agg,id) =>\n                @allTotal[id].push record\n\n            for j, rowKey of rowKeys\n                flatRowKey = rowKey.join(String.fromCharCode(0))\n\n                for i, colKey of colKeys\n                    flatColKey = colKey.join(String.fromCharCode(0))\n\n                    if rowKey.length != 0\n                        if not @rowTotals[flatRowKey]\n                            @rowKeys.push rowKey\n                            @rowTotals[flatRowKey] = @aggregator.map( (agg) => agg(this, rowKey, []))\n                        @rowTotals[flatRowKey].forEach (agg,id) => agg.push record  unless @grouping and colKey.length != 1\n\n                    if colKey.length != 0\n                        if not @colTotals[flatColKey]\n                            @colKeys.push colKey\n                            @colTotals[flatColKey] = @aggregator.map( (agg) => agg(this, [], colKey))\n                        @colTotals[flatColKey].forEach (agg,id) => agg.push record  unless @grouping and rowKey.length != 1\n\n                    if colKey.length != 0 and rowKey.length != 0\n                        if not @tree[flatRowKey]\n                            @tree[flatRowKey] = {}\n                        if not @tree[flatRowKey][flatColKey]\n                            @tree[flatRowKey][flatColKey] = @aggregator.map( (agg) => agg(this, rowKey, colKey))\n                        @tree[flatRowKey][flatColKey].forEach (agg,id) => agg.push record\n\n        getAggregator: (rowKey, colKey, id = 0) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal[id]\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey] && @colTotals[flatColKey][id]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey] && @rowTotals[flatRowKey][id]\n            else\n                agg = @tree[flatRowKey][flatColKey] && @tree[flatRowKey][flatColKey][id]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys(true)\n        colKeys = pivotData.getColKeys(true)\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        compactLayout = (opts.table.compactLayout ? true) and pivotData.grouping\n        rowExpandHandler = if compactLayout then expandRowCol else if pivotData.rowGroupBefore then expandWithSpan else expandRowsGroupAfter\n\n        rowsExpandHandler = getExpandHandler rowKeys, true,  rowExpandHandler.bind pivotData\n        colsExpandHandler = getExpandHandler colKeys, false, expandWithSpan.bind pivotData\n\n        #now actually build the outpu\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            if pivotData.grouping and j < colAttrs.length - 1\n                th.onclick = getExpandAllHandler pivotData, +j, false\n                th.className += \" open level#{j}\"\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.className += \" col#{if pivotData.colGroupBefore then +i else +i+x-1}\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x*Math.max(1,pivotData.aggregator.length))\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    if pivotData.grouping and j < colAttrs.length - 1 and colKey[j]\n                        th.className += \" pvtSubtotal open\"\n                        th.setAttribute(\"colspan\", x*Math.max(1,pivotData.aggregator.length))\n                        th.onclick = colsExpandHandler\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", Math.max(1,pivotData.aggregator.length))\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                if pivotData.grouping and i < rowAttrs.length - 1\n                    th.className += \" open level#{i}\"\n                    th.onclick = getExpandAllHandler pivotData, +i, true\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", pivotData.aggregator.length)\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n\n        if pivotData.aggregatorsLabel and pivotData.aggregatorsLabel.length > 1\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            colspan = rowAttrs.length + (if colAttrs.length == 0 then 0 else 1)\n            th.setAttribute('colspan', colspan)\n            tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                for lbl in pivotData.aggregatorsLabel\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtAggregatorLabel col#{j}\"\n                    th.textContent = lbl\n                    tr.appendChild th\n\n            for lbl in pivotData.aggregatorsLabel\n                th = document.createElement(\"th\")\n                th.className = 'pvtAggregatorLabel'\n                th.textContent = lbl\n                tr.appendChild th\n\n            tbody.appendChild tr\n\n\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            rowGap = rowAttrs.length - rowKey.length\n            tr.className = if rowGap then \"pvtSubtotal level#{rowKey.length}\" else \"pvtData\"\n            for own j, txt of rowKey\n                continue if compactLayout and j < rowKey.length - 1\n                x = if compactLayout then 1 else spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.className += \" row#{if pivotData.rowGroupBefore then +i else +i+x-1}\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if compactLayout\n                        th.colSpan = rowAttrs.length\n                        th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px'\n                    if pivotData.grouping and j < rowAttrs.length - 1\n                        th.className += \" open\"\n                        th.onclick = rowsExpandHandler\n                    tr.appendChild th\n\n            if !compactLayout and rowGap\n                th = document.createElement(\"th\")\n                th.colSpan = rowGap\n                th.textContent = \"Total (#{rowKey[j]})\"\n                tr.appendChild th\n\n            if colAttrs.length\n                th.colSpan++\n\n            for own j, colKey of colKeys #this is the tight loop\n                for agg, id in pivotData.aggregator\n                    aggregator = pivotData.getAggregator(rowKey, colKey, id)\n                    val = aggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal \" if not rowGap\n                    td.className += \"row#{i} col#{j}\"\n                    if colAttrs.length - colKey.length\n                        td.className = \"pvtSubtotal level#{colKey.length} row#{i} col#{j}\"\n                    td.textContent = aggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, rowKey, colKey)\n                    tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator(rowKey, [], id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtTotal rowTotal\"\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, rowKey, [])\n                    td.setAttribute(\"data-for\", \"row\"+i)\n                    tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator([], colKey, id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtTotal colTotal col#{j}\"\n                    td.className += \" pvtSubtotal level#{colKey.length}\" if colKey.length != colAttrs.length\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, [], colKey)\n                    td.setAttribute(\"data-for\", \"col\"+j)\n                    tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator([], [], id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtGrandTotal\"\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, [], [])\n                    tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        inputOpts.pivotData = null;\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n                inputOpts.pivotData = pivotData;\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n            multiple: true\n            parametersActive: false;\n\n        itemsId = 0;\n        aggregators = []\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        renameAggregators = ->\n            for agg, id in aggregators\n                agg.displayName = String.fromCharCode(97 + id).toUpperCase()\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            uiContainer = $(\"<div>\").addClass('pvtUi')\n\n            uiMenu = $(\"<div>\").addClass('pvtUiMenu')\n            uiParameters = $(\"<div>\").addClass('pvtUiParameters')\n            uiPivotContainer = $(\"<div>\").addClass('pvtUiContainer')\n\n            uiButtonColumns = $(\"<div>\")\n                .addClass('pvtUiVerticalButton')\n                .addClass('pvtUiButtonColumns')\n                .addClass('active')\n                .text('Columns')\n                .on('click', ->\n                    opts.parametersActive = !opts.parametersActive\n                    if opts.parametersActive\n                        uiButtonColumns.addClass('active')\n                        uiParameters.show()\n                    else\n                        uiButtonColumns.removeClass('active')\n                        uiParameters.hide()\n                )\n                .appendTo(uiMenu)\n\n            if !opts.parametersActive\n                uiButtonColumns.removeClass('active')\n                uiParameters.hide()\n\n            uiButtonGroups = $(\"<div>\")\n                .addClass('pvtUiVerticalButton')\n                .addClass('pvtUiButtonGroups')\n                .text('Groups')\n                .on('click', ->\n                    if opts.grouping\n                        uiButtonGroups.removeClass('active')\n                        opts.grouping = false\n                    else\n                        uiButtonGroups.addClass('active')\n                        opts.grouping = {\n                            colGroupBefore: false\n                        }\n                    refresh()\n                )\n                .appendTo(uiMenu)\n\n            uiContainer\n                .append(uiMenu)\n                .append(uiParameters)\n                .append(uiPivotContainer);\n\n            ## Render type\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.rendererLabel)\n            pvtRenderType = $('<div>')\n                .addClass('pvtRendererType')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(pvtRenderType)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n                        valueList.hide()\n\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.valuesLabel)\n\n            #aggregator menu and value area\n            divAggregator = $(\"<div>\")\n                .addClass('pvtAggregatorChoose')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n\n            aggregator = $(\"<select>\")\n                .addClass('pvtAggregator')\n                .appendTo(divAggregator)\n                .bind \"change\", =>\n                    if !opts.multiple\n                        @find(\".pvtVals .pvtAttrDropdown\").each -> this.remove()\n                        aggregators = [{value: aggregator.val()}]\n                        refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            if opts.multiple\n                $(\"<a>\", role: \"button\")\n                    .addClass(\"pvtAddAggregator\")\n                    .addClass(\"pvtToolButton\")\n                    .appendTo(divAggregator)\n                    .html('+')\n                    .bind \"click\", ->\n                        aggregators.push {id: ++itemsId, value: aggregator.val()}\n                        renameAggregators()\n                        refresh()\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\")\n                .addClass(\"pvtRowOrder\")\n                .addClass(\"pvtToolButton\")\n                .appendTo(divAggregator)\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\")\n                .addClass(\"pvtColOrder\")\n                .addClass(\"pvtToolButton\")\n                .appendTo(divAggregator)\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            pvVals = $(\"<div>\").addClass('pvtVals')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n\n            uiParameters.append(pvVals)\n\n            # Available fields\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.fieldsLabel)\n\n            uiParameters.append(unused)\n\n            #column axes\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.colsLabel)\n            $(\"<div>\").addClass('pvtAxisContainer pvtCols').appendTo(uiParameters)\n\n            #row axes\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.rowsLabel)\n            $(\"<div>\").addClass('pvtAxisContainer pvtRows').appendTo(uiParameters)\n\n            #the actual pivot table container\n            pivotTable = $(\"<div>\")\n                .addClass('pvtRendererArea')\n                .appendTo(uiPivotContainer)\n\n            #render the UI in its default state\n            @html uiContainer\n\n            #set up the UI initial state as requested by moving elements around\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n                    grouping: opts.grouping\n\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n\n                numInputsToProcess = 0\n\n                aggVals = []\n                for agg, idx in aggregators\n                    aggregatorType = agg.value if typeof agg == \"object\"\n                    aggIdx = agg.id\n                    initialVals = agg.vals\n\n                    numInputsToProcess = opts.aggregators[aggregatorType]([])().numInputs ? 0\n                    vals = []\n                    @find('.pvtVals select.pvtAttrDropdown'+aggIdx).each ->\n                        if numInputsToProcess != 0\n                            numInputsToProcess--\n                            vals.push $(this).val() if $(this).val() != \"\"\n\n\n                    pvtVals = @find(\".pvtVals\")\n                    container =  @find('.pvtVals .pvtAttrDropdownContainer'+aggIdx)\n                    found = container.length > 0\n                    if opts.multiple\n                        if !found\n                            container = $(\"<div>\")\n                                .addClass('pvtAttrDropdownContainer')\n                                .addClass(\"pvtAttrDropdownContainer\"+aggIdx)\n                                .appendTo(pvtVals)\n                            $(\"<label>\")\n                                .addClass('pvtAttrDropdown')\n                                .addClass(\"pvtAttrDropdown\"+aggIdx)\n                                .appendTo(container)\n                                .html('<b>' + agg.displayName + '</b>) ' + aggregatorType)\n                            initialRender = true\n\n                        if !initialRender\n                            @find('.pvtVals .pvtAttrDropdownContainer'+ aggIdx + ' label.pvtAttrDropdown')\n                                .each( -> $(this).html('<b>' + agg.displayName + '</b>) ' + aggregatorType) )\n                    else\n                        container = pvtVals\n\n                    if numInputsToProcess != 0\n                        for x in [0...numInputsToProcess]\n                            newDropdown = $(\"<select>\")\n                                .addClass(\"pvtAttrDropdown\"+aggIdx)\n                                .addClass('pvtAttrDropdown')\n                                .append($(\"<option>\"))\n                                .bind \"change\", -> refresh()\n                            for attr in shownInAggregators\n                                newDropdown.append($(\"<option>\").val(attr).text(attr))\n                            container.append(newDropdown)\n\n\n                    if opts.multiple && !found\n                        $(\"<a>\")\n                            .html('x')\n                            .addClass('pvtRemoveAggregator')\n                            .addClass('pvtToolButton')\n                            .addClass(\"pvtAttrDropdown\"+aggIdx)\n                            .appendTo(container)\n                            .bind \"click\", (->\n                                    this.instance.find(\".pvtVals .pvtAttrDropdownContainer\"+this.aggIdx).remove()\n                                    idx = aggregators.findIndex( (agg) => agg.id == this.aggIdx);\n                                    aggregators.splice(idx, 1)\n                                    renameAggregators();\n                                    refresh()\n                                ).bind({instance: this, aggIdx})\n\n                    if initialRender\n                        vals = initialVals ? opts.vals\n                        i = 0\n                        @find(\".pvtVals select.pvtAttrDropdown\"+aggIdx).each ->\n                            $(this).val vals[i]\n                            i++\n                        initialRender = false\n\n                    aggVals.push vals\n\n                subopts.aggregatorName = aggregators.map((agg) -> agg.value)\n                subopts.vals = aggVals\n                subopts.aggregator = aggregators.map((agg, i) -> opts.aggregators[agg.value](aggVals[i]))\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                if opts.multiple\n                    subopts.aggregatorsLabel = aggregators.map((agg) -> agg.displayName)\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: aggVals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregators.map((agg) -> agg.value)\n                    rendererName: renderer.val()\n\n                currentPivotData = subopts.pivotData\n                delete subopts.pivotData\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions, currentPivotData) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                if opts.multiple\n                    opts.aggregatorName = if Array.isArray(opts.aggregatorName) then opts.aggregatorName else [opts.aggregatorName]\n                    for agg, idx in opts.aggregatorName\n                        aggregators.push {id: ++itemsId, value: agg, vals: opts.vals?[idx]}\n                        renameAggregators()\n                else\n                    @find(\".pvtVals\").append @find(\".pvtAttrDropdown\")\n                    @find(\".pvtAggregator\").val(opts.aggregatorName).change()\n            else\n                @find(\".pvtAggregator\").change()\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Grouping fold/expand rows and cols\n    ###\n\n    childIndex = (el) -> Array.prototype.indexOf.call el.parentNode.children, el\n\n    childKeysIndices = (keys, n) ->\n        up = if keys[0].length == 1 then 1 else -1\n        len = keys[n].length\n        while (n = n+up; key = keys[n]) and key.length > len\n            if key.length == len+1 then n else continue\n\n    parentKeysIndices = (keys, n) ->\n        up = if keys[0].length == 1 then 1 else -1\n        while (len = keys[n].length) > 1\n            while (n = n-up; key = keys[n]) and key.length >= len then\n            n\n\n    levelKeysIndices = (keys, level) ->\n        (keys.filter (d) -> d.length == level).map keys.indexOf.bind(keys)\n\n    getAxis = (table, rows, level) ->\n        if rows\n            table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(#{level})\")\n        else\n            table.find(\"thead tr:nth-child(#{level}) th.pvtAxisLabel\")\n\n    getHeader = (table, rows, n) ->\n       table.find(if rows then \"tbody tr th.row#{n}\" else \"thead th.col#{n}\")\n\n    rowGetter = (table) ->\n        selecttion = table.find('tbody tr')\n        (n) -> $(selecttion[n])\n\n    colGetter = (table) ->\n        selecttion = table.find('tr')\n        (n) -> selecttion.find(\".col#{n}\")\n\n    showHide = (getter, keys, nth, offset, show) ->\n        for i, n of childKeysIndices keys, nth\n            row = getter(n+offset)\n            fn = if show then $.fn.show else $.fn.hide\n            fn.call row\n            if not row.hasClass('collapsed')\n                showHide getter, keys, n, offset, show\n        true\n\n    expandRowsGroupAfter = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        initIndex = childIndex cell.parentNode\n        getter = rowGetter table\n        row = getter nth\n\n        insertPoint = if row.hasClass('collapsed') then getter cell._old else row\n        cell._old = childIndex cell.parentNode if not row.hasClass('collapsed')\n        insertPoint.prepend cell\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            parentIndex = childIndex parent.parentNode\n            parent._old = parent._old ? parentIndex\n            if parent._old == initIndex and parent.rowSpan == 1\n                parent._old -= initIndex - childIndex cell.parentNode\n\n            insertPoint.prepend parent if initIndex == parentIndex\n\n        expandWithSpan cell, rows, keys, nth\n\n    expandWithSpan = (cell, rows, keys, nth) ->\n        table = $(cell).closest('table')\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        dft = if !rows then Math.max(1,@aggregator.length) else 1\n        [ cell._span, cell[span] ] = [ cell[span], cell._span ? dft ]\n        change = cell[span] - cell._span\n\n        for i, p of parentKeysIndices keys, nth\n            parent = (getHeader table, rows, p)[0]\n            if parent[span] == 1\n                parent._span += change\n                break\n            parent[span] += change\n\n        expandRowCol cell, rows, keys, nth, parent\n\n    expandRowCol = (cell, rows, keys, nth, parent) ->\n        table = $(cell).closest('table')\n        getter = if rows then rowGetter table else colGetter table\n        span = if rows then 'rowSpan' else 'colSpan'\n\n        offset = if rows and @aggregator.length > 1 then 1 else 0\n        showHide getter, keys, nth, offset, getter(nth+offset).hasClass('collapsed') unless parent?[span] == 1\n        getter(nth+offset).toggleClass 'collapsed'\n        $(cell).toggleClass 'open close'\n\n    expandAll = (pivotData, table, level, rows, expand) ->\n        if expand and level > 1\n            getAxis(table, rows, level-1).removeClass('close').addClass('open')\n            expandAll pivotData, table, level-1, rows, expand\n\n        levels = (if rows then pivotData.rowAttrs else pivotData.colAttrs).length - 1\n        if not expand and (level < levels)\n            getAxis(table, rows, i).removeClass('open').addClass('close') for i in [level+1..levels]\n\n        keys = if rows then pivotData.rowKeys else pivotData.colKeys\n        for i, n of levelKeysIndices keys, level\n            el = getHeader table, rows, n\n            el.trigger 'click' if expand == el.hasClass('close')\n        null\n\n    getExpandHandler = (keys, rows, handler) ->\n        (ev) ->\n            match = ev.target.className.match if rows then /row(\\d+)/ else /col(\\d+)/\n            handler ev.target, rows, keys, +match[1] if match\n\n    getExpandAllHandler = (pivotData, level, rows) ->\n        (ev) ->\n            expandAll pivotData, $(ev.target).closest('table'), level+1, rows, $(ev.target).hasClass('close')\n            $(ev.target).toggleClass('open close')\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, childIndex, childKeysIndices, colGetter, dayNamesEn, derivers, expandAll, expandRowCol, expandRowsGroupAfter, expandWithSpan, filterByLength, getAxis, getExpandAllHandler, getExpandHandler, getHeader, getSort, levelKeysIndices, locales, mthNamesEn, naturalSort, numberFormat, parentKeysIndices, pivotTableRenderer, rd, renderers, rowGetter, rx, rz, showHide, sortAs, subarrays, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function(id) {\n                var agg;\n                agg = data.getAggregator.apply(data, slice.call(this.selector).concat([id]));\n                return this.inner.value() / agg.inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\",\n          rendererLabel: \"Renderer\",\n          valuesLabel: \"Values\",\n          fieldsLabel: \"Fields\",\n          colsLabel: \"Columns\",\n          rowsLabel: \"Rows\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs, nulls_first) {\n        var a, a1, b, b1, nas, nbs, nf;\n        if (nulls_first == null) {\n          nulls_first = true;\n        }\n        nf = nulls_first ? 1 : -1;\n        if ((bs != null) && (as == null)) {\n          return -1 * nf;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1 * nf;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n    filterByLength = function(keys, length) {\n      return keys.filter(function(x) {\n        return x.length === length;\n      });\n    };\n    subarrays = function(array) {\n      return array.map(function(d, i) {\n        return array.slice(0, i + 1);\n      });\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        if (!Array.isArray(opts.aggregator)) {\n          opts.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n          opts.aggregator = [opts.aggregator];\n        }\n        this.aggregator = (ref1 = opts.aggregator) != null ? ref1 : [aggregatorTemplates.count()()];\n        this.aggregatorName = (ref2 = opts.aggregatorName) != null ? ref2 : \"Count\";\n        this.colAttrs = (ref3 = opts.cols) != null ? ref3 : [];\n        this.rowAttrs = (ref4 = opts.rows) != null ? ref4 : [];\n        this.valAttrs = (ref5 = opts.vals) != null ? ref5 : [];\n        this.sorters = (ref6 = opts.sorters) != null ? ref6 : {};\n        this.rowOrder = (ref7 = opts.rowOrder) != null ? ref7 : \"key_a_to_z\";\n        this.colOrder = (ref8 = opts.colOrder) != null ? ref8 : \"key_a_to_z\";\n        this.derivedAttributes = (ref9 = opts.derivedAttributes) != null ? ref9 : {};\n        this.filter = (ref10 = opts.filter) != null ? ref10 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.sorted = false;\n        this.aggregatorsLabel = (ref11 = opts.aggregatorsLabel) != null ? ref11 : [];\n        this.grouping = (ref12 = opts.grouping) != null ? ref12 : false;\n        this.rowGroupBefore = (ref13 = (ref14 = opts.grouping) != null ? ref14.rowGroupBefore : void 0) != null ? ref13 : true;\n        this.colGroupBefore = (ref15 = (ref16 = opts.grouping) != null ? ref16.colGroupBefore : void 0) != null ? ref15 : false;\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, nulls_first) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i], nulls_first);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs, this.rowGroupBefore));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs, this.colGroupBefore));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function(all_keys) {\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        if (all_keys) {\n          return this.colKeys;\n        } else {\n          return filterByLength(this.colKeys, this.colAttrs.length);\n        }\n      };\n\n      PivotData.prototype.getRowKeys = function(all_keys) {\n        if (all_keys == null) {\n          all_keys = false;\n        }\n        this.sortKeys();\n        if (all_keys) {\n          return this.rowKeys;\n        } else {\n          return filterByLength(this.rowKeys, this.rowAttrs.length);\n        }\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, colKeys, flatColKey, flatRowKey, i, j, l, len1, len2, o, ref, ref1, ref2, ref3, results, rowKey, rowKeys, x;\n        colKeys = [];\n        rowKeys = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKeys.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          rowKeys.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        colKeys = this.grouping && colKeys.length ? subarrays(colKeys) : [colKeys];\n        rowKeys = this.grouping && rowKeys.length ? subarrays(rowKeys) : [rowKeys];\n        this.aggregator.forEach((function(_this) {\n          return function(agg, id) {\n            return _this.allTotal[id].push(record);\n          };\n        })(this));\n        results = [];\n        for (j in rowKeys) {\n          rowKey = rowKeys[j];\n          flatRowKey = rowKey.join(String.fromCharCode(0));\n          results.push((function() {\n            var results1;\n            results1 = [];\n            for (i in colKeys) {\n              colKey = colKeys[i];\n              flatColKey = colKey.join(String.fromCharCode(0));\n              if (rowKey.length !== 0) {\n                if (!this.rowTotals[flatRowKey]) {\n                  this.rowKeys.push(rowKey);\n                  this.rowTotals[flatRowKey] = this.aggregator.map((function(_this) {\n                    return function(agg) {\n                      return agg(_this, rowKey, []);\n                    };\n                  })(this));\n                }\n                this.rowTotals[flatRowKey].forEach((function(_this) {\n                  return function(agg, id) {\n                    if (!(_this.grouping && colKey.length !== 1)) {\n                      return agg.push(record);\n                    }\n                  };\n                })(this));\n              }\n              if (colKey.length !== 0) {\n                if (!this.colTotals[flatColKey]) {\n                  this.colKeys.push(colKey);\n                  this.colTotals[flatColKey] = this.aggregator.map((function(_this) {\n                    return function(agg) {\n                      return agg(_this, [], colKey);\n                    };\n                  })(this));\n                }\n                this.colTotals[flatColKey].forEach((function(_this) {\n                  return function(agg, id) {\n                    if (!(_this.grouping && rowKey.length !== 1)) {\n                      return agg.push(record);\n                    }\n                  };\n                })(this));\n              }\n              if (colKey.length !== 0 && rowKey.length !== 0) {\n                if (!this.tree[flatRowKey]) {\n                  this.tree[flatRowKey] = {};\n                }\n                if (!this.tree[flatRowKey][flatColKey]) {\n                  this.tree[flatRowKey][flatColKey] = this.aggregator.map((function(_this) {\n                    return function(agg) {\n                      return agg(_this, rowKey, colKey);\n                    };\n                  })(this));\n                }\n                results1.push(this.tree[flatRowKey][flatColKey].forEach((function(_this) {\n                  return function(agg, id) {\n                    return agg.push(record);\n                  };\n                })(this)));\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          }).call(this));\n        }\n        return results;\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey, id) {\n        var agg, flatColKey, flatRowKey;\n        if (id == null) {\n          id = 0;\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal[id];\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey] && this.colTotals[flatColKey][id];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey] && this.rowTotals[flatRowKey][id];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey] && this.tree[flatRowKey][flatColKey][id];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var agg, aggregator, c, colAttrs, colKey, colKeys, colsExpandHandler, colspan, compactLayout, defaults, getClickHandler, i, id, j, l, lbl, len1, len2, len3, len4, len5, len6, o, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, result, rowAttrs, rowExpandHandler, rowGap, rowKey, rowKeys, rowsExpandHandler, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, w, x, y;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys(true);\n      colKeys = pivotData.getColKeys(true);\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      compactLayout = ((ref = opts.table.compactLayout) != null ? ref : true) && pivotData.grouping;\n      rowExpandHandler = compactLayout ? expandRowCol : pivotData.rowGroupBefore ? expandWithSpan : expandRowsGroupAfter;\n      rowsExpandHandler = getExpandHandler(rowKeys, true, rowExpandHandler.bind(pivotData));\n      colsExpandHandler = getExpandHandler(colKeys, false, expandWithSpan.bind(pivotData));\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, noDraw, o, ref1, ref2, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref1 = j; 0 <= ref1 ? l <= ref1 : l >= ref1; x = 0 <= ref1 ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = o = 0, ref2 = j; 0 <= ref2 ? o <= ref2 : o >= ref2; x = 0 <= ref2 ? ++o : --o) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        if (pivotData.grouping && j < colAttrs.length - 1) {\n          th.onclick = getExpandAllHandler(pivotData, +j, false);\n          th.className += \" open level\" + j;\n        }\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.className += \" col\" + (pivotData.colGroupBefore ? +i : +i + x - 1);\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x * Math.max(1, pivotData.aggregator.length));\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            if (pivotData.grouping && j < colAttrs.length - 1 && colKey[j]) {\n              th.className += \" pvtSubtotal open\";\n              th.setAttribute(\"colspan\", x * Math.max(1, pivotData.aggregator.length));\n              th.onclick = colsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", Math.max(1, pivotData.aggregator.length));\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          if (pivotData.grouping && i < rowAttrs.length - 1) {\n            th.className += \" open level\" + i;\n            th.onclick = getExpandAllHandler(pivotData, +i, true);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", pivotData.aggregator.length);\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      if (pivotData.aggregatorsLabel && pivotData.aggregatorsLabel.length > 1) {\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        colspan = rowAttrs.length + (colAttrs.length === 0 ? 0 : 1);\n        th.setAttribute('colspan', colspan);\n        tr.appendChild(th);\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref1 = pivotData.aggregatorsLabel;\n          for (l = 0, len1 = ref1.length; l < len1; l++) {\n            lbl = ref1[l];\n            th = document.createElement(\"th\");\n            th.className = \"pvtAggregatorLabel col\" + j;\n            th.textContent = lbl;\n            tr.appendChild(th);\n          }\n        }\n        ref2 = pivotData.aggregatorsLabel;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          lbl = ref2[o];\n          th = document.createElement(\"th\");\n          th.className = 'pvtAggregatorLabel';\n          th.textContent = lbl;\n          tr.appendChild(th);\n        }\n        tbody.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        rowGap = rowAttrs.length - rowKey.length;\n        tr.className = rowGap ? \"pvtSubtotal level\" + rowKey.length : \"pvtData\";\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          if (compactLayout && j < rowKey.length - 1) {\n            continue;\n          }\n          x = compactLayout ? 1 : spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.className += \" row\" + (pivotData.rowGroupBefore ? +i : +i + x - 1);\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (compactLayout) {\n              th.colSpan = rowAttrs.length;\n              th.style.paddingLeft = 5 + parseInt(j) * 20 + 'px';\n            }\n            if (pivotData.grouping && j < rowAttrs.length - 1) {\n              th.className += \" open\";\n              th.onclick = rowsExpandHandler;\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (!compactLayout && rowGap) {\n          th = document.createElement(\"th\");\n          th.colSpan = rowGap;\n          th.textContent = \"Total (\" + rowKey[j] + \")\";\n          tr.appendChild(th);\n        }\n        if (colAttrs.length) {\n          th.colSpan++;\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref3 = pivotData.aggregator;\n          for (id = t = 0, len3 = ref3.length; t < len3; id = ++t) {\n            agg = ref3[id];\n            aggregator = pivotData.getAggregator(rowKey, colKey, id);\n            val = aggregator.value(id);\n            td = document.createElement(\"td\");\n            if (!rowGap) {\n              td.className = \"pvtVal \";\n            }\n            td.className += \"row\" + i + \" col\" + j;\n            if (colAttrs.length - colKey.length) {\n              td.className = \"pvtSubtotal level\" + colKey.length + \" row\" + i + \" col\" + j;\n            }\n            td.textContent = aggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, rowKey, colKey);\n            }\n            tr.appendChild(td);\n          }\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          ref4 = pivotData.aggregator;\n          for (id = u = 0, len4 = ref4.length; u < len4; id = ++u) {\n            agg = ref4[id];\n            totalAggregator = pivotData.getAggregator(rowKey, [], id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtTotal rowTotal\";\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, rowKey, []);\n            }\n            td.setAttribute(\"data-for\", \"row\" + i);\n            tr.appendChild(td);\n          }\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref5 = pivotData.aggregator;\n          for (id = w = 0, len5 = ref5.length; w < len5; id = ++w) {\n            agg = ref5[id];\n            totalAggregator = pivotData.getAggregator([], colKey, id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtTotal colTotal col\" + j;\n            if (colKey.length !== colAttrs.length) {\n              td.className += \" pvtSubtotal level\" + colKey.length;\n            }\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, [], colKey);\n            }\n            td.setAttribute(\"data-for\", \"col\" + j);\n            tr.appendChild(td);\n          }\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          ref6 = pivotData.aggregator;\n          for (id = y = 0, len6 = ref6.length; y < len6; id = ++y) {\n            agg = ref6[id];\n            totalAggregator = pivotData.getAggregator([], [], id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtGrandTotal\";\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, [], []);\n            }\n            tr.appendChild(td);\n          }\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      inputOpts.pivotData = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n          inputOpts.pivotData = pivotData;\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, agg, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, divAggregator, e, existingOpts, fn1, i, idx, initialRender, itemsId, l, len1, len2, len3, len4, localeDefaults, localeStrings, materializedInput, o, opts, ordering, pivotTable, pvVals, pvtRenderType, recordsProcessed, ref, ref1, ref2, ref3, ref4, ref5, refresh, refreshDelayed, renameAggregators, renderer, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, t, u, uiButtonColumns, uiButtonGroups, uiContainer, uiMenu, uiParameters, uiPivotContainer, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        multiple: true,\n        parametersActive: false\n      };\n      itemsId = 0;\n      aggregators = [];\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      renameAggregators = function() {\n        var agg, id, l, len1, results;\n        results = [];\n        for (id = l = 0, len1 = aggregators.length; l < len1; id = ++l) {\n          agg = aggregators[id];\n          results.push(agg.displayName = String.fromCharCode(97 + id).toUpperCase());\n        }\n        return results;\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiContainer = $(\"<div>\").addClass('pvtUi');\n        uiMenu = $(\"<div>\").addClass('pvtUiMenu');\n        uiParameters = $(\"<div>\").addClass('pvtUiParameters');\n        uiPivotContainer = $(\"<div>\").addClass('pvtUiContainer');\n        uiButtonColumns = $(\"<div>\").addClass('pvtUiVerticalButton').addClass('pvtUiButtonColumns').addClass('active').text('Columns').on('click', function() {\n          opts.parametersActive = !opts.parametersActive;\n          if (opts.parametersActive) {\n            uiButtonColumns.addClass('active');\n            return uiParameters.show();\n          } else {\n            uiButtonColumns.removeClass('active');\n            return uiParameters.hide();\n          }\n        }).appendTo(uiMenu);\n        if (!opts.parametersActive) {\n          uiButtonColumns.removeClass('active');\n          uiParameters.hide();\n        }\n        uiButtonGroups = $(\"<div>\").addClass('pvtUiVerticalButton').addClass('pvtUiButtonGroups').text('Groups').on('click', function() {\n          if (opts.grouping) {\n            uiButtonGroups.removeClass('active');\n            opts.grouping = false;\n          } else {\n            uiButtonGroups.addClass('active');\n            opts.grouping = {\n              colGroupBefore: false\n            };\n          }\n          return refresh();\n        }).appendTo(uiMenu);\n        uiContainer.append(uiMenu).append(uiParameters).append(uiPivotContainer);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.rendererLabel);\n        pvtRenderType = $('<div>').addClass('pvtRendererType').addClass('pvtParameter').appendTo(uiParameters);\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(pvtRenderType).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, o, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (o = 0, len2 = ref1.length; o < len2; o++) {\n              value = ref1[o];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.valuesLabel);\n        divAggregator = $(\"<div>\").addClass('pvtAggregatorChoose').addClass('pvtParameter').appendTo(uiParameters);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').appendTo(divAggregator).bind(\"change\", (function(_this) {\n          return function() {\n            if (!opts.multiple) {\n              _this.find(\".pvtVals .pvtAttrDropdown\").each(function() {\n                return this.remove();\n              });\n              aggregators = [\n                {\n                  value: aggregator.val()\n                }\n              ];\n              return refresh();\n            }\n          };\n        })(this));\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        if (opts.multiple) {\n          $(\"<a>\", {\n            role: \"button\"\n          }).addClass(\"pvtAddAggregator\").addClass(\"pvtToolButton\").appendTo(divAggregator).html('+').bind(\"click\", function() {\n            aggregators.push({\n              id: ++itemsId,\n              value: aggregator.val()\n            });\n            renameAggregators();\n            return refresh();\n          });\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").addClass(\"pvtToolButton\").appendTo(divAggregator).data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").addClass(\"pvtToolButton\").appendTo(divAggregator).data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        pvVals = $(\"<div>\").addClass('pvtVals').addClass('pvtParameter').appendTo(uiParameters);\n        uiParameters.append(pvVals);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.fieldsLabel);\n        uiParameters.append(unused);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.colsLabel);\n        $(\"<div>\").addClass('pvtAxisContainer pvtCols').appendTo(uiParameters);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.rowsLabel);\n        $(\"<div>\").addClass('pvtAxisContainer pvtRows').appendTo(uiParameters);\n        pivotTable = $(\"<div>\").addClass('pvtRendererArea').appendTo(uiPivotContainer);\n        this.html(uiContainer);\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var agg, aggIdx, aggVals, aggregatorType, container, currentPivotData, exclusions, found, idx, inclusions, initialVals, len2, len3, newDropdown, numInputsToProcess, o, pivotUIOptions, pvtVals, ref2, ref3, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass,\n              grouping: opts.grouping\n            };\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            numInputsToProcess = 0;\n            aggVals = [];\n            for (idx = o = 0, len2 = aggregators.length; o < len2; idx = ++o) {\n              agg = aggregators[idx];\n              if (typeof agg === \"object\") {\n                aggregatorType = agg.value;\n              }\n              aggIdx = agg.id;\n              initialVals = agg.vals;\n              numInputsToProcess = (ref2 = opts.aggregators[aggregatorType]([])().numInputs) != null ? ref2 : 0;\n              vals = [];\n              _this.find('.pvtVals select.pvtAttrDropdown' + aggIdx).each(function() {\n                if (numInputsToProcess !== 0) {\n                  numInputsToProcess--;\n                  if ($(this).val() !== \"\") {\n                    return vals.push($(this).val());\n                  }\n                }\n              });\n              pvtVals = _this.find(\".pvtVals\");\n              container = _this.find('.pvtVals .pvtAttrDropdownContainer' + aggIdx);\n              found = container.length > 0;\n              if (opts.multiple) {\n                if (!found) {\n                  container = $(\"<div>\").addClass('pvtAttrDropdownContainer').addClass(\"pvtAttrDropdownContainer\" + aggIdx).appendTo(pvtVals);\n                  $(\"<label>\").addClass('pvtAttrDropdown').addClass(\"pvtAttrDropdown\" + aggIdx).appendTo(container).html('<b>' + agg.displayName + '</b>) ' + aggregatorType);\n                  initialRender = true;\n                }\n                if (!initialRender) {\n                  _this.find('.pvtVals .pvtAttrDropdownContainer' + aggIdx + ' label.pvtAttrDropdown').each(function() {\n                    return $(this).html('<b>' + agg.displayName + '</b>) ' + aggregatorType);\n                  });\n                }\n              } else {\n                container = pvtVals;\n              }\n              if (numInputsToProcess !== 0) {\n                for (x = t = 0, ref3 = numInputsToProcess; 0 <= ref3 ? t < ref3 : t > ref3; x = 0 <= ref3 ? ++t : --t) {\n                  newDropdown = $(\"<select>\").addClass(\"pvtAttrDropdown\" + aggIdx).addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                    return refresh();\n                  });\n                  for (u = 0, len3 = shownInAggregators.length; u < len3; u++) {\n                    attr = shownInAggregators[u];\n                    newDropdown.append($(\"<option>\").val(attr).text(attr));\n                  }\n                  container.append(newDropdown);\n                }\n              }\n              if (opts.multiple && !found) {\n                $(\"<a>\").html('x').addClass('pvtRemoveAggregator').addClass('pvtToolButton').addClass(\"pvtAttrDropdown\" + aggIdx).appendTo(container).bind(\"click\", (function() {\n                  this.instance.find(\".pvtVals .pvtAttrDropdownContainer\" + this.aggIdx).remove();\n                  idx = aggregators.findIndex((function(_this) {\n                    return function(agg) {\n                      return agg.id === _this.aggIdx;\n                    };\n                  })(this));\n                  aggregators.splice(idx, 1);\n                  renameAggregators();\n                  return refresh();\n                }).bind({\n                  instance: _this,\n                  aggIdx: aggIdx\n                }));\n              }\n              if (initialRender) {\n                vals = initialVals != null ? initialVals : opts.vals;\n                i = 0;\n                _this.find(\".pvtVals select.pvtAttrDropdown\" + aggIdx).each(function() {\n                  $(this).val(vals[i]);\n                  return i++;\n                });\n                initialRender = false;\n              }\n              aggVals.push(vals);\n            }\n            subopts.aggregatorName = aggregators.map(function(agg) {\n              return agg.value;\n            });\n            subopts.vals = aggVals;\n            subopts.aggregator = aggregators.map(function(agg, i) {\n              return opts.aggregators[agg.value](aggVals[i]);\n            });\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            if (opts.multiple) {\n              subopts.aggregatorsLabel = aggregators.map(function(agg) {\n                return agg.displayName;\n              });\n            }\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref4, ref5;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref4 = \"\" + ((ref5 = record[k]) != null ? ref5 : 'null'), indexOf.call(excludedItems, ref4) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: aggVals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregators.map(function(agg) {\n                return agg.value;\n              }),\n              rendererName: renderer.val()\n            });\n            currentPivotData = subopts.pivotData;\n            delete subopts.pivotData;\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions, currentPivotData);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        ref2 = opts.cols;\n        for (o = 0, len2 = ref2.length; o < len2; o++) {\n          x = ref2[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (t = 0, len3 = ref3.length; t < len3; t++) {\n          x = ref3[t];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          if (opts.multiple) {\n            opts.aggregatorName = Array.isArray(opts.aggregatorName) ? opts.aggregatorName : [opts.aggregatorName];\n            ref4 = opts.aggregatorName;\n            for (idx = u = 0, len4 = ref4.length; u < len4; idx = ++u) {\n              agg = ref4[idx];\n              aggregators.push({\n                id: ++itemsId,\n                value: agg,\n                vals: (ref5 = opts.vals) != null ? ref5[idx] : void 0\n              });\n              renameAggregators();\n            }\n          } else {\n            this.find(\".pvtVals\").append(this.find(\".pvtAttrDropdown\"));\n            this.find(\".pvtAggregator\").val(opts.aggregatorName).change();\n          }\n        } else {\n          this.find(\".pvtAggregator\").change();\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, numCols, numRows, o, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = o = 0, ref2 = numCols; 0 <= ref2 ? o < ref2 : o > ref2; j = 0 <= ref2 ? ++o : --o) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Grouping fold/expand rows and cols\n     */\n    childIndex = function(el) {\n      return Array.prototype.indexOf.call(el.parentNode.children, el);\n    };\n    childKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      up = keys[0].length === 1 ? 1 : -1;\n      len = keys[n].length;\n      results = [];\n      while ((n = n + up, key = keys[n]) && key.length > len) {\n        if (key.length === len + 1) {\n          results.push(n);\n        } else {\n          continue;\n        }\n      }\n      return results;\n    };\n    parentKeysIndices = function(keys, n) {\n      var key, len, results, up;\n      up = keys[0].length === 1 ? 1 : -1;\n      results = [];\n      while ((len = keys[n].length) > 1) {\n        while ((n = n - up, key = keys[n]) && key.length >= len) {}\n        results.push(n);\n      }\n      return results;\n    };\n    levelKeysIndices = function(keys, level) {\n      return (keys.filter(function(d) {\n        return d.length === level;\n      })).map(keys.indexOf.bind(keys));\n    };\n    getAxis = function(table, rows, level) {\n      if (rows) {\n        return table.find(\"thead tr:last-child th.pvtAxisLabel:nth-of-type(\" + level + \")\");\n      } else {\n        return table.find(\"thead tr:nth-child(\" + level + \") th.pvtAxisLabel\");\n      }\n    };\n    getHeader = function(table, rows, n) {\n      return table.find(rows ? \"tbody tr th.row\" + n : \"thead th.col\" + n);\n    };\n    rowGetter = function(table) {\n      var selecttion;\n      selecttion = table.find('tbody tr');\n      return function(n) {\n        return $(selecttion[n]);\n      };\n    };\n    colGetter = function(table) {\n      var selecttion;\n      selecttion = table.find('tr');\n      return function(n) {\n        return selecttion.find(\".col\" + n);\n      };\n    };\n    showHide = function(getter, keys, nth, offset, show) {\n      var fn, i, n, ref, row;\n      ref = childKeysIndices(keys, nth);\n      for (i in ref) {\n        n = ref[i];\n        row = getter(n + offset);\n        fn = show ? $.fn.show : $.fn.hide;\n        fn.call(row);\n        if (!row.hasClass('collapsed')) {\n          showHide(getter, keys, n, offset, show);\n        }\n      }\n      return true;\n    };\n    expandRowsGroupAfter = function(cell, rows, keys, nth) {\n      var getter, i, initIndex, insertPoint, p, parent, parentIndex, ref, ref1, row, table;\n      table = $(cell).closest('table');\n      initIndex = childIndex(cell.parentNode);\n      getter = rowGetter(table);\n      row = getter(nth);\n      insertPoint = row.hasClass('collapsed') ? getter(cell._old) : row;\n      if (!row.hasClass('collapsed')) {\n        cell._old = childIndex(cell.parentNode);\n      }\n      insertPoint.prepend(cell);\n      ref = parentKeysIndices(keys, nth);\n      for (i in ref) {\n        p = ref[i];\n        parent = (getHeader(table, rows, p))[0];\n        parentIndex = childIndex(parent.parentNode);\n        parent._old = (ref1 = parent._old) != null ? ref1 : parentIndex;\n        if (parent._old === initIndex && parent.rowSpan === 1) {\n          parent._old -= initIndex - childIndex(cell.parentNode);\n        }\n        if (initIndex === parentIndex) {\n          insertPoint.prepend(parent);\n        }\n      }\n      return expandWithSpan(cell, rows, keys, nth);\n    };\n    expandWithSpan = function(cell, rows, keys, nth) {\n      var change, dft, i, p, parent, ref, ref1, ref2, span, table;\n      table = $(cell).closest('table');\n      span = rows ? 'rowSpan' : 'colSpan';\n      dft = !rows ? Math.max(1, this.aggregator.length) : 1;\n      ref1 = [cell[span], (ref = cell._span) != null ? ref : dft], cell._span = ref1[0], cell[span] = ref1[1];\n      change = cell[span] - cell._span;\n      ref2 = parentKeysIndices(keys, nth);\n      for (i in ref2) {\n        p = ref2[i];\n        parent = (getHeader(table, rows, p))[0];\n        if (parent[span] === 1) {\n          parent._span += change;\n          break;\n        }\n        parent[span] += change;\n      }\n      return expandRowCol(cell, rows, keys, nth, parent);\n    };\n    expandRowCol = function(cell, rows, keys, nth, parent) {\n      var getter, offset, span, table;\n      table = $(cell).closest('table');\n      getter = rows ? rowGetter(table) : colGetter(table);\n      span = rows ? 'rowSpan' : 'colSpan';\n      offset = rows && this.aggregator.length > 1 ? 1 : 0;\n      if ((parent != null ? parent[span] : void 0) !== 1) {\n        showHide(getter, keys, nth, offset, getter(nth + offset).hasClass('collapsed'));\n      }\n      getter(nth + offset).toggleClass('collapsed');\n      return $(cell).toggleClass('open close');\n    };\n    expandAll = function(pivotData, table, level, rows, expand) {\n      var el, i, keys, l, levels, n, ref, ref1, ref2;\n      if (expand && level > 1) {\n        getAxis(table, rows, level - 1).removeClass('close').addClass('open');\n        expandAll(pivotData, table, level - 1, rows, expand);\n      }\n      levels = (rows ? pivotData.rowAttrs : pivotData.colAttrs).length - 1;\n      if (!expand && (level < levels)) {\n        for (i = l = ref = level + 1, ref1 = levels; ref <= ref1 ? l <= ref1 : l >= ref1; i = ref <= ref1 ? ++l : --l) {\n          getAxis(table, rows, i).removeClass('open').addClass('close');\n        }\n      }\n      keys = rows ? pivotData.rowKeys : pivotData.colKeys;\n      ref2 = levelKeysIndices(keys, level);\n      for (i in ref2) {\n        n = ref2[i];\n        el = getHeader(table, rows, n);\n        if (expand === el.hasClass('close')) {\n          el.trigger('click');\n        }\n      }\n      return null;\n    };\n    getExpandHandler = function(keys, rows, handler) {\n      return function(ev) {\n        var match;\n        match = ev.target.className.match(rows ? /row(\\d+)/ : /col(\\d+)/);\n        if (match) {\n          return handler(ev.target, rows, keys, +match[1]);\n        }\n      };\n    };\n    return getExpandAllHandler = function(pivotData, level, rows) {\n      return function(ev) {\n        expandAll(pivotData, $(ev.target).closest('table'), level + 1, rows, $(ev.target).hasClass('close'));\n        return $(ev.target).toggleClass('open close');\n      };\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}