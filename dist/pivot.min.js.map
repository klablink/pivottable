{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","id","agg","getAggregator","concat","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","rendererLabel","valuesLabel","fieldsLabel","colsLabel","rowsLabel","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","Array","isArray","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","map","sorted","aggregatorsLabel","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","comparison","r","c","flatColKey","flatRowKey","len2","fromCharCode","forEach","pivotUtilities","pivotData","colspan","getClickHandler","lbl","len3","len4","len5","len6","o","spanSize","t","tbody","td","th","thead","totalAggregator","tr","txt","u","w","table","clickCallback","rowValues","colValues","filters","e","document","createElement","className","arr","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","onclick","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","divAggregator","existingOpts","fn1","idx","initialRender","itemsId","materializedInput","ordering","parametersActive","pivotTable","pvVals","pvtRenderType","recordsProcessed","refresh","refreshDelayed","renameAggregators","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","uiButtonColumns","uiContainer","uiMenu","uiParameters","uiPivotContainer","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","showUI","multiple","displayName","toUpperCase","base","addClass","on","show","removeClass","hide","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","class","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","prop","toggleClass","left","top","currentTarget","position","css","remove","role","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","aggIdx","aggVals","aggregatorType","container","currentPivotData","found","initialVals","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","instance","findIndex","splice","not","excludedItems","inclusionsInfo","rendererName","children","setTimeout","inArray","change","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: (id) ->\n                agg = data.getAggregator([@selector...,id]...)\n                return @inner.value() / agg.inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.sort(naturalSort).join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n                rendererLabel: \"Renderer\"\n                valuesLabel: \"Values\"\n                fieldsLabel: \"Fields\"\n                colsLabel: \"Columns\"\n                rowsLabel: \"Rows\"\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n            if !Array.isArray(opts.aggregator)\n                opts.aggregator = opts.aggregator ? aggregatorTemplates.count()()\n                opts.aggregator = [opts.aggregator]\n            @aggregator = opts.aggregator ? [aggregatorTemplates.count()()]\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []\n            @sorters = opts.sorters ? {}\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n            @derivedAttributes = opts.derivedAttributes ? {}\n            @filter = opts.filter ? (-> true)\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator.map( (agg) => agg(this, [], []))\n            @sorted = false\n            @aggregatorsLabel = opts.aggregatorsLabel ? []\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                @processRecord(record) if @filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @derivedAttributes, (record) =>\n                return if not @filter(record)\n                for k, v of criteria\n                    return if v != (record[k] ? \"null\")\n                callback(record)\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                v = (r,c) => @getAggregator(r,c).value()\n                switch @rowOrder\n                    when \"value_a_to_z\"  then @rowKeys.sort (a,b) =>  naturalSort v(a,[]), v(b,[])\n                    when \"value_z_to_a\" then @rowKeys.sort (a,b) => -naturalSort v(a,[]), v(b,[])\n                    else             @rowKeys.sort @arrSort(@rowAttrs)\n                switch @colOrder\n                    when \"value_a_to_z\"  then @colKeys.sort (a,b) =>  naturalSort v([],a), v([],b)\n                    when \"value_z_to_a\" then @colKeys.sort (a,b) => -naturalSort v([],a), v([],b)\n                    else             @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @aggregator.forEach (agg,id) =>\n                @allTotal[id].push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator.map( (agg) => agg(this, rowKey, []))\n                @rowTotals[flatRowKey].forEach (agg,id) => agg.push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator.map( (agg) => agg(this, [], colKey))\n                @colTotals[flatColKey].forEach (agg,id) => agg.push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator.map( (agg) => agg(this, rowKey, colKey))\n                @tree[flatRowKey][flatColKey].forEach (agg,id) => agg.push record\n\n        getAggregator: (rowKey, colKey, id = 0) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal[id]\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey] && @colTotals[flatColKey][id]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey] && @rowTotals[flatRowKey][id]\n            else\n                agg = @tree[flatRowKey][flatColKey] && @tree[flatRowKey][flatColKey][id]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            table:\n                clickCallback: null\n                rowTotals: true\n                colTotals: true\n            localeStrings: totals: \"Totals\"\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowValues, colValues) ->\n                filters = {}\n                filters[attr] = colValues[i] for own i, attr of colAttrs when colValues[i]?\n                filters[attr] = rowValues[i] for own i, attr of rowAttrs when rowValues[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", Math.max(x, pivotData.aggregator.length))\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0 && opts.table.rowTotals\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                th.setAttribute(\"colspan\", pivotData.aggregator.length)\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", pivotData.aggregator.length)\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n\n        if pivotData.aggregatorsLabel and pivotData.aggregatorsLabel.length > 1\n            tr = document.createElement(\"tr\")\n            th = document.createElement(\"th\")\n            colspan = rowAttrs.length + (if colAttrs.length == 0 then 0 else 1)\n            th.setAttribute('colspan', colspan)\n            tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                for lbl in pivotData.aggregatorsLabel\n                    th = document.createElement(\"th\")\n                    th.className = 'pvtAggregatorLabel'\n                    th.textContent = lbl\n                    tr.appendChild th\n\n            for lbl in pivotData.aggregatorsLabel\n                th = document.createElement(\"th\")\n                th.className = 'pvtAggregatorLabel'\n                th.textContent = lbl\n                tr.appendChild th\n\n            tbody.appendChild tr\n\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n\n            for own j, colKey of colKeys #this is the tight loop\n                for agg, id in pivotData.aggregator\n                    aggregator = pivotData.getAggregator(rowKey, colKey, id)\n                    val = aggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtVal row#{i} col#{j}\"\n                    td.textContent = aggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, rowKey, colKey)\n                    tr.appendChild td\n\n            if opts.table.rowTotals || colAttrs.length == 0\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator(rowKey, [], id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtTotal rowTotal\"\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, rowKey, [])\n                    td.setAttribute(\"data-for\", \"row\"+i)\n                    tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        if opts.table.colTotals || rowAttrs.length == 0\n            tr = document.createElement(\"tr\")\n            if opts.table.colTotals || rowAttrs.length == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel pvtColTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n                tr.appendChild th\n            for own j, colKey of colKeys\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator([], colKey, id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtTotal colTotal\"\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, [], colKey)\n                    td.setAttribute(\"data-for\", \"col\"+j)\n                    tr.appendChild td\n            if opts.table.rowTotals || colAttrs.length == 0\n                for agg, id in pivotData.aggregator\n                    totalAggregator = pivotData.getAggregator([], [], id)\n                    val = totalAggregator.value(id)\n                    td = document.createElement(\"td\")\n                    td.className = \"pvtGrandTotal\"\n                    td.textContent = totalAggregator.format(val)\n                    td.setAttribute(\"data-value\", val)\n                    if getClickHandler?\n                        td.onclick = getClickHandler(val, [], [])\n                    tr.appendChild td\n            tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        inputOpts.pivotData = null;\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n                inputOpts.pivotData = pivotData;\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            showUI: true\n            filter: -> true\n            sorters: {}\n            multiple: true\n\n        itemsId = 0;\n        aggregators = []\n        parametersActive = true;\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        renameAggregators = ->\n            for agg, id in aggregators\n                agg.displayName = String.fromCharCode(97 + id).toUpperCase()\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            uiContainer = $(\"<div>\").addClass('pvtUi')\n\n            uiMenu = $(\"<div>\").addClass('pvtUiMenu')\n            uiParameters = $(\"<div>\").addClass('pvtUiParameters')\n            uiPivotContainer = $(\"<div>\").addClass('pvtUiContainer')\n\n            uiButtonColumns = $(\"<div>\")\n                .addClass('pvtUiVerticalButton')\n                .addClass('pvtUiButtonColumns')\n                .addClass('active')\n                .text('Columns')\n                .on('click', ->\n                    parametersActive = !parametersActive\n                    if parametersActive\n                        uiButtonColumns.addClass('active')\n                        uiParameters.show()\n                    else\n                        uiButtonColumns.removeClass('active')\n                        uiParameters.hide()\n                )\n                .appendTo(uiMenu)\n\n            uiContainer\n                .append(uiMenu)\n                .append(uiParameters)\n                .append(uiPivotContainer);\n\n            ## Render type\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.rendererLabel)\n            pvtRenderType = $('<div>')\n                .addClass('pvtRendererType')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(pvtRenderType)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n            #axis list, including the double-click menu\n            unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.indexOf(\">=\") == 0 then accept_gen(\">=\", [1,0])\n                                        else if filter.indexOf(\"<=\") == 0 then accept_gen(\"<=\", [-1,0])\n                                        else if filter.indexOf(\">\") == 0  then accept_gen(\">\",  [1])\n                                        else if filter.indexOf(\"<\") == 0  then accept_gen(\"<\",  [-1])\n                                        else if filter.indexOf(\"~\") == 0  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n                        valueList.hide()\n\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.valuesLabel)\n\n            #aggregator menu and value area\n            divAggregator = $(\"<div>\")\n                .addClass('pvtAggregatorChoose')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n\n            aggregator = $(\"<select>\")\n                .addClass('pvtAggregator')\n                .appendTo(divAggregator)\n                .bind \"change\", =>\n                    if !opts.multiple\n                        @find(\".pvtVals .pvtAttrDropdown\").each -> this.remove()\n                        aggregators = [{value: aggregator.val()}]\n                        refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            if opts.multiple\n                $(\"<a>\", role: \"button\")\n                    .addClass(\"pvtAddAggregator\")\n                    .addClass(\"pvtToolButton\")\n                    .appendTo(divAggregator)\n                    .html('+')\n                    .bind \"click\", ->\n                        aggregators.push {id: ++itemsId, value: aggregator.val()}\n                        renameAggregators()\n                        refresh()\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\")\n                .addClass(\"pvtRowOrder\")\n                .addClass(\"pvtToolButton\")\n                .appendTo(divAggregator)\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\")\n                .addClass(\"pvtColOrder\")\n                .addClass(\"pvtToolButton\")\n                .appendTo(divAggregator)\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            pvVals = $(\"<div>\").addClass('pvtVals')\n                .addClass('pvtParameter')\n                .appendTo(uiParameters)\n\n            uiParameters.append(pvVals)\n\n            # Available fields\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.fieldsLabel)\n\n            uiParameters.append(unused)\n\n            #column axes\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.colsLabel)\n            $(\"<div>\").addClass('pvtAxisContainer pvtCols').appendTo(uiParameters)\n\n            #row axes\n            pvtRenderType = $('<div>')\n                .addClass('pvtParameterLabel')\n                .appendTo(uiParameters)\n                .text(localeStrings.rowsLabel)\n            $(\"<div>\").addClass('pvtAxisContainer pvtRows').appendTo(uiParameters)\n\n            #the actual pivot table container\n            pivotTable = $(\"<div>\")\n                .addClass('pvtRendererArea')\n                .appendTo(uiPivotContainer)\n\n            #render the UI in its default state\n            @html uiContainer\n\n            #set up the UI initial state as requested by moving elements around\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n\n                numInputsToProcess = 0\n\n                aggVals = []\n                for agg, idx in aggregators\n                    aggregatorType = agg.value if typeof agg == \"object\"\n                    aggIdx = agg.id\n                    initialVals = agg.vals\n\n                    numInputsToProcess = opts.aggregators[aggregatorType]([])().numInputs ? 0\n                    vals = []\n                    @find('.pvtVals select.pvtAttrDropdown'+aggIdx).each ->\n                        if numInputsToProcess != 0\n                            numInputsToProcess--\n                            vals.push $(this).val() if $(this).val() != \"\"\n\n\n                    pvtVals = @find(\".pvtVals\")\n                    container =  @find('.pvtVals .pvtAttrDropdownContainer'+aggIdx)\n                    found = container.length > 0\n                    if opts.multiple\n                        if !found\n                            container = $(\"<div>\")\n                                .addClass('pvtAttrDropdownContainer')\n                                .addClass(\"pvtAttrDropdownContainer\"+aggIdx)\n                                .appendTo(pvtVals)\n                            $(\"<label>\")\n                                .addClass('pvtAttrDropdown')\n                                .addClass(\"pvtAttrDropdown\"+aggIdx)\n                                .appendTo(container)\n                                .html('<b>' + agg.displayName + '</b>) ' + aggregatorType)\n                            initialRender = true\n\n                        if !initialRender\n                            @find('.pvtVals .pvtAttrDropdownContainer'+ aggIdx + ' label.pvtAttrDropdown')\n                                .each( -> $(this).html('<b>' + agg.displayName + '</b>) ' + aggregatorType) )\n                    else\n                        container = pvtVals\n\n                    if numInputsToProcess != 0\n                        for x in [0...numInputsToProcess]\n                            newDropdown = $(\"<select>\")\n                                .addClass(\"pvtAttrDropdown\"+aggIdx)\n                                .addClass('pvtAttrDropdown')\n                                .append($(\"<option>\"))\n                                .bind \"change\", -> refresh()\n                            for attr in shownInAggregators\n                                newDropdown.append($(\"<option>\").val(attr).text(attr))\n                            container.append(newDropdown)\n\n\n                    if opts.multiple && !found\n                        $(\"<a>\")\n                            .html('x')\n                            .addClass('pvtRemoveAggregator')\n                            .addClass('pvtToolButton')\n                            .addClass(\"pvtAttrDropdown\"+aggIdx)\n                            .appendTo(container)\n                            .bind \"click\", (->\n                                    this.instance.find(\".pvtVals .pvtAttrDropdownContainer\"+this.aggIdx).remove()\n                                    idx = aggregators.findIndex( (agg) => agg.id == this.aggIdx);\n                                    aggregators.splice(idx, 1)\n                                    renameAggregators();\n                                    refresh()\n                                ).bind({instance: this, aggIdx})\n\n                    if initialRender\n                        vals = initialVals ? opts.vals\n                        i = 0\n                        @find(\".pvtVals select.pvtAttrDropdown\"+aggIdx).each ->\n                            $(this).val vals[i]\n                            i++\n                        initialRender = false\n\n                    aggVals.push vals\n\n                subopts.aggregatorName = aggregators.map((agg) -> agg.value)\n                subopts.vals = aggVals\n                subopts.aggregator = aggregators.map((agg, i) -> opts.aggregators[agg.value](aggVals[i]))\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                if opts.multiple\n                    subopts.aggregatorsLabel = aggregators.map((agg) -> agg.displayName)\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: aggVals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregators.map((agg) -> agg.value)\n                    rendererName: renderer.val()\n\n                currentPivotData = subopts.pivotData\n                delete subopts.pivotData\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions, currentPivotData) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                if opts.multiple\n                    opts.aggregatorName = if Array.isArray(opts.aggregatorName) then opts.aggregatorName else [opts.aggregatorName]\n                    for agg, idx in opts.aggregatorName\n                        aggregators.push {id: ++itemsId, value: agg, vals: opts.vals?[idx]}\n                        renameAggregators()\n                else\n                    @find(\".pvtVals\").append @find(\".pvtAttrDropdown\")\n                    @find(\".pvtAggregator\").val(opts.aggregatorName).change()\n            else\n                @find(\".pvtAggregator\").change()\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            @find(\".pvtUiCell\").hide() unless opts.showUI\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function(id) {\n                var agg;\n                agg = data.getAggregator.apply(data, slice.call(this.selector).concat([id]));\n                return this.inner.value() / agg.inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.sort(naturalSort).join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\",\n          rendererLabel: \"Renderer\",\n          valuesLabel: \"Values\",\n          fieldsLabel: \"Fields\",\n          colsLabel: \"Columns\",\n          rowsLabel: \"Rows\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        if (!Array.isArray(opts.aggregator)) {\n          opts.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n          opts.aggregator = [opts.aggregator];\n        }\n        this.aggregator = (ref1 = opts.aggregator) != null ? ref1 : [aggregatorTemplates.count()()];\n        this.aggregatorName = (ref2 = opts.aggregatorName) != null ? ref2 : \"Count\";\n        this.colAttrs = (ref3 = opts.cols) != null ? ref3 : [];\n        this.rowAttrs = (ref4 = opts.rows) != null ? ref4 : [];\n        this.valAttrs = (ref5 = opts.vals) != null ? ref5 : [];\n        this.sorters = (ref6 = opts.sorters) != null ? ref6 : {};\n        this.rowOrder = (ref7 = opts.rowOrder) != null ? ref7 : \"key_a_to_z\";\n        this.colOrder = (ref8 = opts.colOrder) != null ? ref8 : \"key_a_to_z\";\n        this.derivedAttributes = (ref9 = opts.derivedAttributes) != null ? ref9 : {};\n        this.filter = (ref10 = opts.filter) != null ? ref10 : (function() {\n          return true;\n        });\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.sorted = false;\n        this.aggregatorsLabel = (ref11 = opts.aggregatorsLabel) != null ? ref11 : [];\n        PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (_this.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.derivedAttributes, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : \"null\")) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var v;\n        if (!this.sorted) {\n          this.sorted = true;\n          v = (function(_this) {\n            return function(r, c) {\n              return _this.getAggregator(r, c).value();\n            };\n          })(this);\n          switch (this.rowOrder) {\n            case \"value_a_to_z\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            case \"value_z_to_a\":\n              this.rowKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v(a, []), v(b, []));\n                };\n              })(this));\n              break;\n            default:\n              this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          }\n          switch (this.colOrder) {\n            case \"value_a_to_z\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            case \"value_z_to_a\":\n              return this.colKeys.sort((function(_this) {\n                return function(a, b) {\n                  return -naturalSort(v([], a), v([], b));\n                };\n              })(this));\n            default:\n              return this.colKeys.sort(this.arrSort(this.colAttrs));\n          }\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.aggregator.forEach((function(_this) {\n          return function(agg, id) {\n            return _this.allTotal[id].push(record);\n          };\n        })(this));\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator.map((function(_this) {\n              return function(agg) {\n                return agg(_this, rowKey, []);\n              };\n            })(this));\n          }\n          this.rowTotals[flatRowKey].forEach((function(_this) {\n            return function(agg, id) {\n              return agg.push(record);\n            };\n          })(this));\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator.map((function(_this) {\n              return function(agg) {\n                return agg(_this, [], colKey);\n              };\n            })(this));\n          }\n          this.colTotals[flatColKey].forEach((function(_this) {\n            return function(agg, id) {\n              return agg.push(record);\n            };\n          })(this));\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator.map((function(_this) {\n              return function(agg) {\n                return agg(_this, rowKey, colKey);\n              };\n            })(this));\n          }\n          return this.tree[flatRowKey][flatColKey].forEach((function(_this) {\n            return function(agg, id) {\n              return agg.push(record);\n            };\n          })(this));\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey, id) {\n        var agg, flatColKey, flatRowKey;\n        if (id == null) {\n          id = 0;\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal[id];\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey] && this.colTotals[flatColKey][id];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey] && this.rowTotals[flatRowKey][id];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey] && this.tree[flatRowKey][flatColKey][id];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var agg, aggregator, c, colAttrs, colKey, colKeys, colspan, defaults, getClickHandler, i, id, j, l, lbl, len1, len2, len3, len4, len5, len6, n, o, r, ref, ref1, ref2, ref3, ref4, ref5, result, rowAttrs, rowKey, rowKeys, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, w, x;\n      defaults = {\n        table: {\n          clickCallback: null,\n          rowTotals: true,\n          colTotals: true\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowValues, colValues) {\n          var attr, filters, i;\n          filters = {};\n          for (i in colAttrs) {\n            if (!hasProp.call(colAttrs, i)) continue;\n            attr = colAttrs[i];\n            if (colValues[i] != null) {\n              filters[attr] = colValues[i];\n            }\n          }\n          for (i in rowAttrs) {\n            if (!hasProp.call(rowAttrs, i)) continue;\n            attr = rowAttrs[i];\n            if (rowValues[i] != null) {\n              filters[attr] = rowValues[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", Math.max(x, pivotData.aggregator.length));\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0 && opts.table.rowTotals) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          th.setAttribute(\"colspan\", pivotData.aggregator.length);\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", pivotData.aggregator.length);\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      if (pivotData.aggregatorsLabel && pivotData.aggregatorsLabel.length > 1) {\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        colspan = rowAttrs.length + (colAttrs.length === 0 ? 0 : 1);\n        th.setAttribute('colspan', colspan);\n        tr.appendChild(th);\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref = pivotData.aggregatorsLabel;\n          for (l = 0, len1 = ref.length; l < len1; l++) {\n            lbl = ref[l];\n            th = document.createElement(\"th\");\n            th.className = 'pvtAggregatorLabel';\n            th.textContent = lbl;\n            tr.appendChild(th);\n          }\n        }\n        ref1 = pivotData.aggregatorsLabel;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          lbl = ref1[n];\n          th = document.createElement(\"th\");\n          th.className = 'pvtAggregatorLabel';\n          th.textContent = lbl;\n          tr.appendChild(th);\n        }\n        tbody.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref2 = pivotData.aggregator;\n          for (id = o = 0, len3 = ref2.length; o < len3; id = ++o) {\n            agg = ref2[id];\n            aggregator = pivotData.getAggregator(rowKey, colKey, id);\n            val = aggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtVal row\" + i + \" col\" + j;\n            td.textContent = aggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, rowKey, colKey);\n            }\n            tr.appendChild(td);\n          }\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          ref3 = pivotData.aggregator;\n          for (id = t = 0, len4 = ref3.length; t < len4; id = ++t) {\n            agg = ref3[id];\n            totalAggregator = pivotData.getAggregator(rowKey, [], id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtTotal rowTotal\";\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, rowKey, []);\n            }\n            td.setAttribute(\"data-for\", \"row\" + i);\n            tr.appendChild(td);\n          }\n        }\n        tbody.appendChild(tr);\n      }\n      if (opts.table.colTotals || rowAttrs.length === 0) {\n        tr = document.createElement(\"tr\");\n        if (opts.table.colTotals || rowAttrs.length === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel pvtColTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          ref4 = pivotData.aggregator;\n          for (id = u = 0, len5 = ref4.length; u < len5; id = ++u) {\n            agg = ref4[id];\n            totalAggregator = pivotData.getAggregator([], colKey, id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtTotal colTotal\";\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, [], colKey);\n            }\n            td.setAttribute(\"data-for\", \"col\" + j);\n            tr.appendChild(td);\n          }\n        }\n        if (opts.table.rowTotals || colAttrs.length === 0) {\n          ref5 = pivotData.aggregator;\n          for (id = w = 0, len6 = ref5.length; w < len6; id = ++w) {\n            agg = ref5[id];\n            totalAggregator = pivotData.getAggregator([], [], id);\n            val = totalAggregator.value(id);\n            td = document.createElement(\"td\");\n            td.className = \"pvtGrandTotal\";\n            td.textContent = totalAggregator.format(val);\n            td.setAttribute(\"data-value\", val);\n            if (getClickHandler != null) {\n              td.onclick = getClickHandler(val, [], []);\n            }\n            tr.appendChild(td);\n          }\n        }\n        tbody.appendChild(tr);\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      inputOpts.pivotData = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n          inputOpts.pivotData = pivotData;\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, agg, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, divAggregator, e, existingOpts, fn1, i, idx, initialRender, itemsId, l, len1, len2, len3, len4, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, parametersActive, pivotTable, pvVals, pvtRenderType, recordsProcessed, ref, ref1, ref2, ref3, ref4, ref5, refresh, refreshDelayed, renameAggregators, renderer, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, t, uiButtonColumns, uiContainer, uiMenu, uiParameters, uiPivotContainer, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        showUI: true,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        multiple: true\n      };\n      itemsId = 0;\n      aggregators = [];\n      parametersActive = true;\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      renameAggregators = function() {\n        var agg, id, l, len1, results;\n        results = [];\n        for (id = l = 0, len1 = aggregators.length; l < len1; id = ++l) {\n          agg = aggregators[id];\n          results.push(agg.displayName = String.fromCharCode(97 + id).toUpperCase());\n        }\n        return results;\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiContainer = $(\"<div>\").addClass('pvtUi');\n        uiMenu = $(\"<div>\").addClass('pvtUiMenu');\n        uiParameters = $(\"<div>\").addClass('pvtUiParameters');\n        uiPivotContainer = $(\"<div>\").addClass('pvtUiContainer');\n        uiButtonColumns = $(\"<div>\").addClass('pvtUiVerticalButton').addClass('pvtUiButtonColumns').addClass('active').text('Columns').on('click', function() {\n          parametersActive = !parametersActive;\n          if (parametersActive) {\n            uiButtonColumns.addClass('active');\n            return uiParameters.show();\n          } else {\n            uiButtonColumns.removeClass('active');\n            return uiParameters.hide();\n          }\n        }).appendTo(uiMenu);\n        uiContainer.append(uiMenu).append(uiParameters).append(uiPivotContainer);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.rendererLabel);\n        pvtRenderType = $('<div>').addClass('pvtRendererType').addClass('pvtParameter').appendTo(uiParameters);\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(pvtRenderType).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<div>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.indexOf(\">=\") === 0 ? accept_gen(\">=\", [1, 0]) : filter.indexOf(\"<=\") === 0 ? accept_gen(\"<=\", [-1, 0]) : filter.indexOf(\">\") === 0 ? accept_gen(\">\", [1]) : filter.indexOf(\"<\") === 0 ? accept_gen(\"<\", [-1]) : filter.indexOf(\"~\") === 0 ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.valuesLabel);\n        divAggregator = $(\"<div>\").addClass('pvtAggregatorChoose').addClass('pvtParameter').appendTo(uiParameters);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').appendTo(divAggregator).bind(\"change\", (function(_this) {\n          return function() {\n            if (!opts.multiple) {\n              _this.find(\".pvtVals .pvtAttrDropdown\").each(function() {\n                return this.remove();\n              });\n              aggregators = [\n                {\n                  value: aggregator.val()\n                }\n              ];\n              return refresh();\n            }\n          };\n        })(this));\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        if (opts.multiple) {\n          $(\"<a>\", {\n            role: \"button\"\n          }).addClass(\"pvtAddAggregator\").addClass(\"pvtToolButton\").appendTo(divAggregator).html('+').bind(\"click\", function() {\n            aggregators.push({\n              id: ++itemsId,\n              value: aggregator.val()\n            });\n            renameAggregators();\n            return refresh();\n          });\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").addClass(\"pvtToolButton\").appendTo(divAggregator).data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").addClass(\"pvtToolButton\").appendTo(divAggregator).data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        pvVals = $(\"<div>\").addClass('pvtVals').addClass('pvtParameter').appendTo(uiParameters);\n        uiParameters.append(pvVals);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.fieldsLabel);\n        uiParameters.append(unused);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.colsLabel);\n        $(\"<div>\").addClass('pvtAxisContainer pvtCols').appendTo(uiParameters);\n        pvtRenderType = $('<div>').addClass('pvtParameterLabel').appendTo(uiParameters).text(localeStrings.rowsLabel);\n        $(\"<div>\").addClass('pvtAxisContainer pvtRows').appendTo(uiParameters);\n        pivotTable = $(\"<div>\").addClass('pvtRendererArea').appendTo(uiPivotContainer);\n        this.html(uiContainer);\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var agg, aggIdx, aggVals, aggregatorType, container, currentPivotData, exclusions, found, idx, inclusions, initialVals, len2, len3, n, newDropdown, numInputsToProcess, o, pivotUIOptions, pvtVals, ref2, ref3, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            numInputsToProcess = 0;\n            aggVals = [];\n            for (idx = n = 0, len2 = aggregators.length; n < len2; idx = ++n) {\n              agg = aggregators[idx];\n              if (typeof agg === \"object\") {\n                aggregatorType = agg.value;\n              }\n              aggIdx = agg.id;\n              initialVals = agg.vals;\n              numInputsToProcess = (ref2 = opts.aggregators[aggregatorType]([])().numInputs) != null ? ref2 : 0;\n              vals = [];\n              _this.find('.pvtVals select.pvtAttrDropdown' + aggIdx).each(function() {\n                if (numInputsToProcess !== 0) {\n                  numInputsToProcess--;\n                  if ($(this).val() !== \"\") {\n                    return vals.push($(this).val());\n                  }\n                }\n              });\n              pvtVals = _this.find(\".pvtVals\");\n              container = _this.find('.pvtVals .pvtAttrDropdownContainer' + aggIdx);\n              found = container.length > 0;\n              if (opts.multiple) {\n                if (!found) {\n                  container = $(\"<div>\").addClass('pvtAttrDropdownContainer').addClass(\"pvtAttrDropdownContainer\" + aggIdx).appendTo(pvtVals);\n                  $(\"<label>\").addClass('pvtAttrDropdown').addClass(\"pvtAttrDropdown\" + aggIdx).appendTo(container).html('<b>' + agg.displayName + '</b>) ' + aggregatorType);\n                  initialRender = true;\n                }\n                if (!initialRender) {\n                  _this.find('.pvtVals .pvtAttrDropdownContainer' + aggIdx + ' label.pvtAttrDropdown').each(function() {\n                    return $(this).html('<b>' + agg.displayName + '</b>) ' + aggregatorType);\n                  });\n                }\n              } else {\n                container = pvtVals;\n              }\n              if (numInputsToProcess !== 0) {\n                for (x = o = 0, ref3 = numInputsToProcess; 0 <= ref3 ? o < ref3 : o > ref3; x = 0 <= ref3 ? ++o : --o) {\n                  newDropdown = $(\"<select>\").addClass(\"pvtAttrDropdown\" + aggIdx).addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                    return refresh();\n                  });\n                  for (t = 0, len3 = shownInAggregators.length; t < len3; t++) {\n                    attr = shownInAggregators[t];\n                    newDropdown.append($(\"<option>\").val(attr).text(attr));\n                  }\n                  container.append(newDropdown);\n                }\n              }\n              if (opts.multiple && !found) {\n                $(\"<a>\").html('x').addClass('pvtRemoveAggregator').addClass('pvtToolButton').addClass(\"pvtAttrDropdown\" + aggIdx).appendTo(container).bind(\"click\", (function() {\n                  this.instance.find(\".pvtVals .pvtAttrDropdownContainer\" + this.aggIdx).remove();\n                  idx = aggregators.findIndex((function(_this) {\n                    return function(agg) {\n                      return agg.id === _this.aggIdx;\n                    };\n                  })(this));\n                  aggregators.splice(idx, 1);\n                  renameAggregators();\n                  return refresh();\n                }).bind({\n                  instance: _this,\n                  aggIdx: aggIdx\n                }));\n              }\n              if (initialRender) {\n                vals = initialVals != null ? initialVals : opts.vals;\n                i = 0;\n                _this.find(\".pvtVals select.pvtAttrDropdown\" + aggIdx).each(function() {\n                  $(this).val(vals[i]);\n                  return i++;\n                });\n                initialRender = false;\n              }\n              aggVals.push(vals);\n            }\n            subopts.aggregatorName = aggregators.map(function(agg) {\n              return agg.value;\n            });\n            subopts.vals = aggVals;\n            subopts.aggregator = aggregators.map(function(agg, i) {\n              return opts.aggregators[agg.value](aggVals[i]);\n            });\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            if (opts.multiple) {\n              subopts.aggregatorsLabel = aggregators.map(function(agg) {\n                return agg.displayName;\n              });\n            }\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref4, ref5;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref4 = \"\" + ((ref5 = record[k]) != null ? ref5 : 'null'), indexOf.call(excludedItems, ref4) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: aggVals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregators.map(function(agg) {\n                return agg.value;\n              }),\n              rendererName: renderer.val()\n            });\n            currentPivotData = subopts.pivotData;\n            delete subopts.pivotData;\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions, currentPivotData);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          if (opts.multiple) {\n            opts.aggregatorName = Array.isArray(opts.aggregatorName) ? opts.aggregatorName : [opts.aggregatorName];\n            ref4 = opts.aggregatorName;\n            for (idx = t = 0, len4 = ref4.length; t < len4; idx = ++t) {\n              agg = ref4[idx];\n              aggregators.push({\n                id: ++itemsId,\n                value: agg,\n                vals: (ref5 = opts.vals) != null ? ref5[idx] : void 0\n              });\n              renameAggregators();\n            }\n          } else {\n            this.find(\".pvtVals\").append(this.find(\".pvtAttrDropdown\"));\n            this.find(\".pvtAggregator\").val(opts.aggregatorName).change();\n          }\n        } else {\n          this.find(\".pvtAggregator\").change();\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        if (!opts.showUI) {\n          this.find(\".pvtUiCell\").hide();\n        }\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}